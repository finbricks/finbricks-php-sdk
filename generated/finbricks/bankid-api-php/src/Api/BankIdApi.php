<?php
/**
 * BankIdApi
 * PHP version 7.2
 *
 * @category Class
 * @package  Finbricks\Api\BankId
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Finbricks.com API - BankId services
 *
 * Finbricks.com API - BankId services
 *
 * The version of the OpenAPI document: 1.0.0
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 5.1.1
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace Finbricks\Api\BankId\Api;

use GuzzleHttp\Client;
use GuzzleHttp\ClientInterface;
use GuzzleHttp\Exception\RequestException;
use GuzzleHttp\Psr7\MultipartStream;
use GuzzleHttp\Psr7\Request;
use GuzzleHttp\RequestOptions;
use Finbricks\Api\BankId\ApiException;
use Finbricks\Api\BankId\Configuration;
use Finbricks\Api\BankId\HeaderSelector;
use Finbricks\Api\BankId\ObjectSerializer;

/**
 * BankIdApi Class Doc Comment
 *
 * @category Class
 * @package  Finbricks\Api\BankId
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */
class BankIdApi
{
    /**
     * @var ClientInterface
     */
    protected $client;

    /**
     * @var Configuration
     */
    protected $config;

    /**
     * @var HeaderSelector
     */
    protected $headerSelector;

    /**
     * @var int Host index
     */
    protected $hostIndex;

    /**
     * @param ClientInterface $client
     * @param Configuration   $config
     * @param HeaderSelector  $selector
     * @param int             $hostIndex (Optional) host index to select the list of hosts if defined in the OpenAPI spec
     */
    public function __construct(
        ClientInterface $client = null,
        Configuration $config = null,
        HeaderSelector $selector = null,
        $hostIndex = 0
    ) {
        $this->client = $client ?: new Client();
        $this->config = $config ?: new Configuration();
        $this->headerSelector = $selector ?: new HeaderSelector();
        $this->hostIndex = $hostIndex;
    }

    /**
     * Set the host index
     *
     * @param int $hostIndex Host index (required)
     */
    public function setHostIndex($hostIndex): void
    {
        $this->hostIndex = $hostIndex;
    }

    /**
     * Get the host index
     *
     * @return int Host index
     */
    public function getHostIndex()
    {
        return $this->hostIndex;
    }

    /**
     * @return Configuration
     */
    public function getConfig()
    {
        return $this->config;
    }

    /**
     * Operation bankIdAuthenticate
     *
     * Get redirect url for end-user to BankId authentication
     *
     * @param  string $signature Signature of the request. For more information, see chapter [Signing the request](#section/Security/Signing-the-request). (required)
     * @param  \Finbricks\Api\BankId\Model\BankIdAuthRequest $bankIdAuthRequest bankIdAuthRequest (required)
     *
     * @throws \Finbricks\Api\BankId\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Finbricks\Api\BankId\Model\BankIdAuthResponse|\Finbricks\Api\BankId\Model\Error
     */
    public function bankIdAuthenticate($signature, $bankIdAuthRequest)
    {
        list($response) = $this->bankIdAuthenticateWithHttpInfo($signature, $bankIdAuthRequest);
        return $response;
    }

    /**
     * Operation bankIdAuthenticateWithHttpInfo
     *
     * Get redirect url for end-user to BankId authentication
     *
     * @param  string $signature Signature of the request. For more information, see chapter [Signing the request](#section/Security/Signing-the-request). (required)
     * @param  \Finbricks\Api\BankId\Model\BankIdAuthRequest $bankIdAuthRequest (required)
     *
     * @throws \Finbricks\Api\BankId\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Finbricks\Api\BankId\Model\BankIdAuthResponse|\Finbricks\Api\BankId\Model\Error, HTTP status code, HTTP response headers (array of strings)
     */
    public function bankIdAuthenticateWithHttpInfo($signature, $bankIdAuthRequest)
    {
        $request = $this->bankIdAuthenticateRequest($signature, $bankIdAuthRequest);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\Finbricks\Api\BankId\Model\BankIdAuthResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Finbricks\Api\BankId\Model\BankIdAuthResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                default:
                    if ('\Finbricks\Api\BankId\Model\Error' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Finbricks\Api\BankId\Model\Error', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\Finbricks\Api\BankId\Model\BankIdAuthResponse';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Finbricks\Api\BankId\Model\BankIdAuthResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                default:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Finbricks\Api\BankId\Model\Error',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation bankIdAuthenticateAsync
     *
     * Get redirect url for end-user to BankId authentication
     *
     * @param  string $signature Signature of the request. For more information, see chapter [Signing the request](#section/Security/Signing-the-request). (required)
     * @param  \Finbricks\Api\BankId\Model\BankIdAuthRequest $bankIdAuthRequest (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function bankIdAuthenticateAsync($signature, $bankIdAuthRequest)
    {
        return $this->bankIdAuthenticateAsyncWithHttpInfo($signature, $bankIdAuthRequest)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation bankIdAuthenticateAsyncWithHttpInfo
     *
     * Get redirect url for end-user to BankId authentication
     *
     * @param  string $signature Signature of the request. For more information, see chapter [Signing the request](#section/Security/Signing-the-request). (required)
     * @param  \Finbricks\Api\BankId\Model\BankIdAuthRequest $bankIdAuthRequest (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function bankIdAuthenticateAsyncWithHttpInfo($signature, $bankIdAuthRequest)
    {
        $returnType = '\Finbricks\Api\BankId\Model\BankIdAuthResponse';
        $request = $this->bankIdAuthenticateRequest($signature, $bankIdAuthRequest);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'bankIdAuthenticate'
     *
     * @param  string $signature Signature of the request. For more information, see chapter [Signing the request](#section/Security/Signing-the-request). (required)
     * @param  \Finbricks\Api\BankId\Model\BankIdAuthRequest $bankIdAuthRequest (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function bankIdAuthenticateRequest($signature, $bankIdAuthRequest)
    {
        // verify the required parameter 'signature' is set
        if ($signature === null || (is_array($signature) && count($signature) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $signature when calling bankIdAuthenticate'
            );
        }
        // verify the required parameter 'bankIdAuthRequest' is set
        if ($bankIdAuthRequest === null || (is_array($bankIdAuthRequest) && count($bankIdAuthRequest) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $bankIdAuthRequest when calling bankIdAuthenticate'
            );
        }

        $resourcePath = '/bankId/authenticate';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // header params
        if ($signature !== null) {
            $headerParams['signature'] = ObjectSerializer::toHeaderValue($signature);
        }



        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($bankIdAuthRequest)) {
            if ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($bankIdAuthRequest));
            } else {
                $httpBody = $bankIdAuthRequest;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation bankIdBanks
     *
     * List of banks supported by BankId.
     *
     * @param  string $merchantId Unique merchant identifier from merchant registration process (required)
     * @param  string $signature Signature of the request. For more information, see chapter [Signing the request](#section/Security/Signing-the-request). (required)
     *
     * @throws \Finbricks\Api\BankId\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Finbricks\Api\BankId\Model\Banks|\Finbricks\Api\BankId\Model\Error
     */
    public function bankIdBanks($merchantId, $signature)
    {
        list($response) = $this->bankIdBanksWithHttpInfo($merchantId, $signature);
        return $response;
    }

    /**
     * Operation bankIdBanksWithHttpInfo
     *
     * List of banks supported by BankId.
     *
     * @param  string $merchantId Unique merchant identifier from merchant registration process (required)
     * @param  string $signature Signature of the request. For more information, see chapter [Signing the request](#section/Security/Signing-the-request). (required)
     *
     * @throws \Finbricks\Api\BankId\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Finbricks\Api\BankId\Model\Banks|\Finbricks\Api\BankId\Model\Error, HTTP status code, HTTP response headers (array of strings)
     */
    public function bankIdBanksWithHttpInfo($merchantId, $signature)
    {
        $request = $this->bankIdBanksRequest($merchantId, $signature);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\Finbricks\Api\BankId\Model\Banks' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Finbricks\Api\BankId\Model\Banks', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                default:
                    if ('\Finbricks\Api\BankId\Model\Error' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Finbricks\Api\BankId\Model\Error', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\Finbricks\Api\BankId\Model\Banks';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Finbricks\Api\BankId\Model\Banks',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                default:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Finbricks\Api\BankId\Model\Error',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation bankIdBanksAsync
     *
     * List of banks supported by BankId.
     *
     * @param  string $merchantId Unique merchant identifier from merchant registration process (required)
     * @param  string $signature Signature of the request. For more information, see chapter [Signing the request](#section/Security/Signing-the-request). (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function bankIdBanksAsync($merchantId, $signature)
    {
        return $this->bankIdBanksAsyncWithHttpInfo($merchantId, $signature)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation bankIdBanksAsyncWithHttpInfo
     *
     * List of banks supported by BankId.
     *
     * @param  string $merchantId Unique merchant identifier from merchant registration process (required)
     * @param  string $signature Signature of the request. For more information, see chapter [Signing the request](#section/Security/Signing-the-request). (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function bankIdBanksAsyncWithHttpInfo($merchantId, $signature)
    {
        $returnType = '\Finbricks\Api\BankId\Model\Banks';
        $request = $this->bankIdBanksRequest($merchantId, $signature);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'bankIdBanks'
     *
     * @param  string $merchantId Unique merchant identifier from merchant registration process (required)
     * @param  string $signature Signature of the request. For more information, see chapter [Signing the request](#section/Security/Signing-the-request). (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function bankIdBanksRequest($merchantId, $signature)
    {
        // verify the required parameter 'merchantId' is set
        if ($merchantId === null || (is_array($merchantId) && count($merchantId) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $merchantId when calling bankIdBanks'
            );
        }
        // verify the required parameter 'signature' is set
        if ($signature === null || (is_array($signature) && count($signature) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $signature when calling bankIdBanks'
            );
        }

        $resourcePath = '/bankId/banks';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($merchantId !== null) {
            if('form' === 'form' && is_array($merchantId)) {
                foreach($merchantId as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['merchantId'] = $merchantId;
            }
        }

        // header params
        if ($signature !== null) {
            $headerParams['signature'] = ObjectSerializer::toHeaderValue($signature);
        }



        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation bankIdConnect
     *
     * Returns basic Claims about the authenticated End-User
     *
     * @param  string $merchantId Unique merchant identifier from merchant registration process (required)
     * @param  string $clientIdForBankId Id identifying the end user at the merchant. (required)
     * @param  string $provider Provider code. Identifier of the bank where the end user authenticates. Example values CSOB, CSAS. (required)
     * @param  string $signature Signature of the request. For more information, see chapter [Signing the request](#section/Security/Signing-the-request). (required)
     *
     * @throws \Finbricks\Api\BankId\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Finbricks\Api\BankId\Model\UserInfo|\Finbricks\Api\BankId\Model\Error
     */
    public function bankIdConnect($merchantId, $clientIdForBankId, $provider, $signature)
    {
        list($response) = $this->bankIdConnectWithHttpInfo($merchantId, $clientIdForBankId, $provider, $signature);
        return $response;
    }

    /**
     * Operation bankIdConnectWithHttpInfo
     *
     * Returns basic Claims about the authenticated End-User
     *
     * @param  string $merchantId Unique merchant identifier from merchant registration process (required)
     * @param  string $clientIdForBankId Id identifying the end user at the merchant. (required)
     * @param  string $provider Provider code. Identifier of the bank where the end user authenticates. Example values CSOB, CSAS. (required)
     * @param  string $signature Signature of the request. For more information, see chapter [Signing the request](#section/Security/Signing-the-request). (required)
     *
     * @throws \Finbricks\Api\BankId\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Finbricks\Api\BankId\Model\UserInfo|\Finbricks\Api\BankId\Model\Error, HTTP status code, HTTP response headers (array of strings)
     */
    public function bankIdConnectWithHttpInfo($merchantId, $clientIdForBankId, $provider, $signature)
    {
        $request = $this->bankIdConnectRequest($merchantId, $clientIdForBankId, $provider, $signature);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\Finbricks\Api\BankId\Model\UserInfo' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Finbricks\Api\BankId\Model\UserInfo', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                default:
                    if ('\Finbricks\Api\BankId\Model\Error' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Finbricks\Api\BankId\Model\Error', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\Finbricks\Api\BankId\Model\UserInfo';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Finbricks\Api\BankId\Model\UserInfo',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                default:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Finbricks\Api\BankId\Model\Error',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation bankIdConnectAsync
     *
     * Returns basic Claims about the authenticated End-User
     *
     * @param  string $merchantId Unique merchant identifier from merchant registration process (required)
     * @param  string $clientIdForBankId Id identifying the end user at the merchant. (required)
     * @param  string $provider Provider code. Identifier of the bank where the end user authenticates. Example values CSOB, CSAS. (required)
     * @param  string $signature Signature of the request. For more information, see chapter [Signing the request](#section/Security/Signing-the-request). (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function bankIdConnectAsync($merchantId, $clientIdForBankId, $provider, $signature)
    {
        return $this->bankIdConnectAsyncWithHttpInfo($merchantId, $clientIdForBankId, $provider, $signature)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation bankIdConnectAsyncWithHttpInfo
     *
     * Returns basic Claims about the authenticated End-User
     *
     * @param  string $merchantId Unique merchant identifier from merchant registration process (required)
     * @param  string $clientIdForBankId Id identifying the end user at the merchant. (required)
     * @param  string $provider Provider code. Identifier of the bank where the end user authenticates. Example values CSOB, CSAS. (required)
     * @param  string $signature Signature of the request. For more information, see chapter [Signing the request](#section/Security/Signing-the-request). (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function bankIdConnectAsyncWithHttpInfo($merchantId, $clientIdForBankId, $provider, $signature)
    {
        $returnType = '\Finbricks\Api\BankId\Model\UserInfo';
        $request = $this->bankIdConnectRequest($merchantId, $clientIdForBankId, $provider, $signature);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'bankIdConnect'
     *
     * @param  string $merchantId Unique merchant identifier from merchant registration process (required)
     * @param  string $clientIdForBankId Id identifying the end user at the merchant. (required)
     * @param  string $provider Provider code. Identifier of the bank where the end user authenticates. Example values CSOB, CSAS. (required)
     * @param  string $signature Signature of the request. For more information, see chapter [Signing the request](#section/Security/Signing-the-request). (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function bankIdConnectRequest($merchantId, $clientIdForBankId, $provider, $signature)
    {
        // verify the required parameter 'merchantId' is set
        if ($merchantId === null || (is_array($merchantId) && count($merchantId) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $merchantId when calling bankIdConnect'
            );
        }
        // verify the required parameter 'clientIdForBankId' is set
        if ($clientIdForBankId === null || (is_array($clientIdForBankId) && count($clientIdForBankId) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $clientIdForBankId when calling bankIdConnect'
            );
        }
        if (strlen($clientIdForBankId) > 100) {
            throw new \InvalidArgumentException('invalid length for "$clientIdForBankId" when calling BankIdApi.bankIdConnect, must be smaller than or equal to 100.');
        }

        // verify the required parameter 'provider' is set
        if ($provider === null || (is_array($provider) && count($provider) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $provider when calling bankIdConnect'
            );
        }
        // verify the required parameter 'signature' is set
        if ($signature === null || (is_array($signature) && count($signature) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $signature when calling bankIdConnect'
            );
        }

        $resourcePath = '/bankId/connect';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($merchantId !== null) {
            if('form' === 'form' && is_array($merchantId)) {
                foreach($merchantId as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['merchantId'] = $merchantId;
            }
        }
        // query params
        if ($clientIdForBankId !== null) {
            if('form' === 'form' && is_array($clientIdForBankId)) {
                foreach($clientIdForBankId as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['clientIdForBankId'] = $clientIdForBankId;
            }
        }
        // query params
        if ($provider !== null) {
            if('form' === 'form' && is_array($provider)) {
                foreach($provider as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['provider'] = $provider;
            }
        }

        // header params
        if ($signature !== null) {
            $headerParams['signature'] = ObjectSerializer::toHeaderValue($signature);
        }



        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation bankIdDelete
     *
     * Delete all existing user authentications
     *
     * @param  string $merchantId Unique merchant identifier from merchant registration process (required)
     * @param  string $signature Signature of the request. For more information, see chapter [Signing the request](#section/Security/Signing-the-request). (required)
     * @param  string $clientIdForBankId Id identifying the end user at the merchant. (required)
     * @param  string $provider Provider code. Identifier of the bank where the end user authenticates. Example values CSOB, CSAS. (required)
     *
     * @throws \Finbricks\Api\BankId\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return void
     */
    public function bankIdDelete($merchantId, $signature, $clientIdForBankId, $provider)
    {
        $this->bankIdDeleteWithHttpInfo($merchantId, $signature, $clientIdForBankId, $provider);
    }

    /**
     * Operation bankIdDeleteWithHttpInfo
     *
     * Delete all existing user authentications
     *
     * @param  string $merchantId Unique merchant identifier from merchant registration process (required)
     * @param  string $signature Signature of the request. For more information, see chapter [Signing the request](#section/Security/Signing-the-request). (required)
     * @param  string $clientIdForBankId Id identifying the end user at the merchant. (required)
     * @param  string $provider Provider code. Identifier of the bank where the end user authenticates. Example values CSOB, CSAS. (required)
     *
     * @throws \Finbricks\Api\BankId\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function bankIdDeleteWithHttpInfo($merchantId, $signature, $clientIdForBankId, $provider)
    {
        $request = $this->bankIdDeleteRequest($merchantId, $signature, $clientIdForBankId, $provider);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                default:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Finbricks\Api\BankId\Model\Error',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation bankIdDeleteAsync
     *
     * Delete all existing user authentications
     *
     * @param  string $merchantId Unique merchant identifier from merchant registration process (required)
     * @param  string $signature Signature of the request. For more information, see chapter [Signing the request](#section/Security/Signing-the-request). (required)
     * @param  string $clientIdForBankId Id identifying the end user at the merchant. (required)
     * @param  string $provider Provider code. Identifier of the bank where the end user authenticates. Example values CSOB, CSAS. (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function bankIdDeleteAsync($merchantId, $signature, $clientIdForBankId, $provider)
    {
        return $this->bankIdDeleteAsyncWithHttpInfo($merchantId, $signature, $clientIdForBankId, $provider)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation bankIdDeleteAsyncWithHttpInfo
     *
     * Delete all existing user authentications
     *
     * @param  string $merchantId Unique merchant identifier from merchant registration process (required)
     * @param  string $signature Signature of the request. For more information, see chapter [Signing the request](#section/Security/Signing-the-request). (required)
     * @param  string $clientIdForBankId Id identifying the end user at the merchant. (required)
     * @param  string $provider Provider code. Identifier of the bank where the end user authenticates. Example values CSOB, CSAS. (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function bankIdDeleteAsyncWithHttpInfo($merchantId, $signature, $clientIdForBankId, $provider)
    {
        $returnType = '';
        $request = $this->bankIdDeleteRequest($merchantId, $signature, $clientIdForBankId, $provider);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'bankIdDelete'
     *
     * @param  string $merchantId Unique merchant identifier from merchant registration process (required)
     * @param  string $signature Signature of the request. For more information, see chapter [Signing the request](#section/Security/Signing-the-request). (required)
     * @param  string $clientIdForBankId Id identifying the end user at the merchant. (required)
     * @param  string $provider Provider code. Identifier of the bank where the end user authenticates. Example values CSOB, CSAS. (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function bankIdDeleteRequest($merchantId, $signature, $clientIdForBankId, $provider)
    {
        // verify the required parameter 'merchantId' is set
        if ($merchantId === null || (is_array($merchantId) && count($merchantId) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $merchantId when calling bankIdDelete'
            );
        }
        // verify the required parameter 'signature' is set
        if ($signature === null || (is_array($signature) && count($signature) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $signature when calling bankIdDelete'
            );
        }
        // verify the required parameter 'clientIdForBankId' is set
        if ($clientIdForBankId === null || (is_array($clientIdForBankId) && count($clientIdForBankId) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $clientIdForBankId when calling bankIdDelete'
            );
        }
        if (strlen($clientIdForBankId) > 100) {
            throw new \InvalidArgumentException('invalid length for "$clientIdForBankId" when calling BankIdApi.bankIdDelete, must be smaller than or equal to 100.');
        }

        // verify the required parameter 'provider' is set
        if ($provider === null || (is_array($provider) && count($provider) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $provider when calling bankIdDelete'
            );
        }

        $resourcePath = '/bankId/revoke';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($merchantId !== null) {
            if('form' === 'form' && is_array($merchantId)) {
                foreach($merchantId as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['merchantId'] = $merchantId;
            }
        }
        // query params
        if ($clientIdForBankId !== null) {
            if('form' === 'form' && is_array($clientIdForBankId)) {
                foreach($clientIdForBankId as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['clientIdForBankId'] = $clientIdForBankId;
            }
        }
        // query params
        if ($provider !== null) {
            if('form' === 'form' && is_array($provider)) {
                foreach($provider as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['provider'] = $provider;
            }
        }

        // header params
        if ($signature !== null) {
            $headerParams['signature'] = ObjectSerializer::toHeaderValue($signature);
        }



        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'DELETE',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation bankIdProfileGet
     *
     * Returns an extended (down to AML) set of authenticated End-User information.
     *
     * @param  string $merchantId Unique merchant identifier from merchant registration process (required)
     * @param  string $clientIdForBankId Id identifying the end user at the merchant. (required)
     * @param  string $provider Provider code. Identifier of the bank where the end user authenticates. Example values CSOB, CSAS. (required)
     * @param  string $scopeGroup Scope group defines, what scopes will be requested when authentication in the bank. For more information see description of &#x60;/bankId/authenticate&#x60; endpoint. (required)
     * @param  string $signature Signature of the request. For more information, see chapter [Signing the request](#section/Security/Signing-the-request). (required)
     *
     * @throws \Finbricks\Api\BankId\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Finbricks\Api\BankId\Model\Profile|\Finbricks\Api\BankId\Model\Error
     */
    public function bankIdProfileGet($merchantId, $clientIdForBankId, $provider, $scopeGroup, $signature)
    {
        list($response) = $this->bankIdProfileGetWithHttpInfo($merchantId, $clientIdForBankId, $provider, $scopeGroup, $signature);
        return $response;
    }

    /**
     * Operation bankIdProfileGetWithHttpInfo
     *
     * Returns an extended (down to AML) set of authenticated End-User information.
     *
     * @param  string $merchantId Unique merchant identifier from merchant registration process (required)
     * @param  string $clientIdForBankId Id identifying the end user at the merchant. (required)
     * @param  string $provider Provider code. Identifier of the bank where the end user authenticates. Example values CSOB, CSAS. (required)
     * @param  string $scopeGroup Scope group defines, what scopes will be requested when authentication in the bank. For more information see description of &#x60;/bankId/authenticate&#x60; endpoint. (required)
     * @param  string $signature Signature of the request. For more information, see chapter [Signing the request](#section/Security/Signing-the-request). (required)
     *
     * @throws \Finbricks\Api\BankId\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Finbricks\Api\BankId\Model\Profile|\Finbricks\Api\BankId\Model\Error, HTTP status code, HTTP response headers (array of strings)
     */
    public function bankIdProfileGetWithHttpInfo($merchantId, $clientIdForBankId, $provider, $scopeGroup, $signature)
    {
        $request = $this->bankIdProfileGetRequest($merchantId, $clientIdForBankId, $provider, $scopeGroup, $signature);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\Finbricks\Api\BankId\Model\Profile' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Finbricks\Api\BankId\Model\Profile', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                default:
                    if ('\Finbricks\Api\BankId\Model\Error' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Finbricks\Api\BankId\Model\Error', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\Finbricks\Api\BankId\Model\Profile';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Finbricks\Api\BankId\Model\Profile',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                default:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Finbricks\Api\BankId\Model\Error',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation bankIdProfileGetAsync
     *
     * Returns an extended (down to AML) set of authenticated End-User information.
     *
     * @param  string $merchantId Unique merchant identifier from merchant registration process (required)
     * @param  string $clientIdForBankId Id identifying the end user at the merchant. (required)
     * @param  string $provider Provider code. Identifier of the bank where the end user authenticates. Example values CSOB, CSAS. (required)
     * @param  string $scopeGroup Scope group defines, what scopes will be requested when authentication in the bank. For more information see description of &#x60;/bankId/authenticate&#x60; endpoint. (required)
     * @param  string $signature Signature of the request. For more information, see chapter [Signing the request](#section/Security/Signing-the-request). (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function bankIdProfileGetAsync($merchantId, $clientIdForBankId, $provider, $scopeGroup, $signature)
    {
        return $this->bankIdProfileGetAsyncWithHttpInfo($merchantId, $clientIdForBankId, $provider, $scopeGroup, $signature)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation bankIdProfileGetAsyncWithHttpInfo
     *
     * Returns an extended (down to AML) set of authenticated End-User information.
     *
     * @param  string $merchantId Unique merchant identifier from merchant registration process (required)
     * @param  string $clientIdForBankId Id identifying the end user at the merchant. (required)
     * @param  string $provider Provider code. Identifier of the bank where the end user authenticates. Example values CSOB, CSAS. (required)
     * @param  string $scopeGroup Scope group defines, what scopes will be requested when authentication in the bank. For more information see description of &#x60;/bankId/authenticate&#x60; endpoint. (required)
     * @param  string $signature Signature of the request. For more information, see chapter [Signing the request](#section/Security/Signing-the-request). (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function bankIdProfileGetAsyncWithHttpInfo($merchantId, $clientIdForBankId, $provider, $scopeGroup, $signature)
    {
        $returnType = '\Finbricks\Api\BankId\Model\Profile';
        $request = $this->bankIdProfileGetRequest($merchantId, $clientIdForBankId, $provider, $scopeGroup, $signature);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'bankIdProfileGet'
     *
     * @param  string $merchantId Unique merchant identifier from merchant registration process (required)
     * @param  string $clientIdForBankId Id identifying the end user at the merchant. (required)
     * @param  string $provider Provider code. Identifier of the bank where the end user authenticates. Example values CSOB, CSAS. (required)
     * @param  string $scopeGroup Scope group defines, what scopes will be requested when authentication in the bank. For more information see description of &#x60;/bankId/authenticate&#x60; endpoint. (required)
     * @param  string $signature Signature of the request. For more information, see chapter [Signing the request](#section/Security/Signing-the-request). (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function bankIdProfileGetRequest($merchantId, $clientIdForBankId, $provider, $scopeGroup, $signature)
    {
        // verify the required parameter 'merchantId' is set
        if ($merchantId === null || (is_array($merchantId) && count($merchantId) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $merchantId when calling bankIdProfileGet'
            );
        }
        // verify the required parameter 'clientIdForBankId' is set
        if ($clientIdForBankId === null || (is_array($clientIdForBankId) && count($clientIdForBankId) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $clientIdForBankId when calling bankIdProfileGet'
            );
        }
        if (strlen($clientIdForBankId) > 100) {
            throw new \InvalidArgumentException('invalid length for "$clientIdForBankId" when calling BankIdApi.bankIdProfileGet, must be smaller than or equal to 100.');
        }

        // verify the required parameter 'provider' is set
        if ($provider === null || (is_array($provider) && count($provider) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $provider when calling bankIdProfileGet'
            );
        }
        // verify the required parameter 'scopeGroup' is set
        if ($scopeGroup === null || (is_array($scopeGroup) && count($scopeGroup) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $scopeGroup when calling bankIdProfileGet'
            );
        }
        // verify the required parameter 'signature' is set
        if ($signature === null || (is_array($signature) && count($signature) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $signature when calling bankIdProfileGet'
            );
        }

        $resourcePath = '/bankId/profile';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($merchantId !== null) {
            if('form' === 'form' && is_array($merchantId)) {
                foreach($merchantId as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['merchantId'] = $merchantId;
            }
        }
        // query params
        if ($clientIdForBankId !== null) {
            if('form' === 'form' && is_array($clientIdForBankId)) {
                foreach($clientIdForBankId as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['clientIdForBankId'] = $clientIdForBankId;
            }
        }
        // query params
        if ($provider !== null) {
            if('form' === 'form' && is_array($provider)) {
                foreach($provider as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['provider'] = $provider;
            }
        }
        // query params
        if ($scopeGroup !== null) {
            if('form' === 'form' && is_array($scopeGroup)) {
                foreach($scopeGroup as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['scopeGroup'] = $scopeGroup;
            }
        }

        // header params
        if ($signature !== null) {
            $headerParams['signature'] = ObjectSerializer::toHeaderValue($signature);
        }



        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Create http client option
     *
     * @throws \RuntimeException on file opening failure
     * @return array of http client options
     */
    protected function createHttpClientOption()
    {
        $options = [];
        if ($this->config->getDebug()) {
            $options[RequestOptions::DEBUG] = fopen($this->config->getDebugFile(), 'a');
            if (!$options[RequestOptions::DEBUG]) {
                throw new \RuntimeException('Failed to open the debug file: ' . $this->config->getDebugFile());
            }
        }

        return $options;
    }
}
