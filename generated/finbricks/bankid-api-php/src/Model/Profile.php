<?php
/**
 * Profile
 *
 * PHP version 7.2
 *
 * @category Class
 * @package  Finbricks\Api\BankId
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Finbricks.com API - BankId services
 *
 * Finbricks.com API - BankId services
 *
 * The version of the OpenAPI document: 1.0.0
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 5.1.1
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace Finbricks\Api\BankId\Model;

use \ArrayAccess;
use \Finbricks\Api\BankId\ObjectSerializer;

/**
 * Profile Class Doc Comment
 *
 * @category Class
 * @description Provide detailed information about user
 * @package  Finbricks\Api\BankId
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<TKey, TValue>
 * @template TKey int|null
 * @template TValue mixed|null
 */
class Profile implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'Profile';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'sub' => 'string',
        'txn' => 'string',
        'verifiedClaims' => '\Finbricks\Api\BankId\Model\VerifiedClaims',
        'titlePrefix' => 'string',
        'titleSuffix' => 'string',
        'givenName' => 'string',
        'familyName' => 'string',
        'middleName' => 'string',
        'gender' => '\Finbricks\Api\BankId\Model\Gender',
        'birthdate' => '\DateTime',
        'birthnumber' => 'string',
        'age' => 'float',
        'majority' => 'bool',
        'dateOfDeath' => 'string',
        'birthplace' => 'string',
        'primaryNationality' => 'string',
        'nationalities' => 'string[]',
        'maritalstatus' => '\Finbricks\Api\BankId\Model\Maritalstatus',
        'addresses' => '\Finbricks\Api\BankId\Model\Address[]',
        'idcards' => '\Finbricks\Api\BankId\Model\Idcard[]',
        'email' => 'string',
        'phoneNumber' => 'string',
        'pep' => 'bool',
        'limitedLegalCapacity' => 'bool',
        'paymentAccounts' => 'string[]',
        'updatedAt' => 'float'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'sub' => null,
        'txn' => null,
        'verifiedClaims' => null,
        'titlePrefix' => null,
        'titleSuffix' => null,
        'givenName' => null,
        'familyName' => null,
        'middleName' => null,
        'gender' => null,
        'birthdate' => 'date',
        'birthnumber' => null,
        'age' => null,
        'majority' => null,
        'dateOfDeath' => null,
        'birthplace' => null,
        'primaryNationality' => null,
        'nationalities' => null,
        'maritalstatus' => null,
        'addresses' => null,
        'idcards' => null,
        'email' => null,
        'phoneNumber' => null,
        'pep' => null,
        'limitedLegalCapacity' => null,
        'paymentAccounts' => null,
        'updatedAt' => 'long'
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'sub' => 'sub',
        'txn' => 'txn',
        'verifiedClaims' => 'verified_claims',
        'titlePrefix' => 'title_prefix',
        'titleSuffix' => 'title_suffix',
        'givenName' => 'given_name',
        'familyName' => 'family_name',
        'middleName' => 'middle_name',
        'gender' => 'gender',
        'birthdate' => 'birthdate',
        'birthnumber' => 'birthnumber',
        'age' => 'age',
        'majority' => 'majority',
        'dateOfDeath' => 'date_of_death',
        'birthplace' => 'birthplace',
        'primaryNationality' => 'primary_nationality',
        'nationalities' => 'nationalities',
        'maritalstatus' => 'maritalstatus',
        'addresses' => 'addresses',
        'idcards' => 'idcards',
        'email' => 'email',
        'phoneNumber' => 'phone_number',
        'pep' => 'pep',
        'limitedLegalCapacity' => 'limited_legal_capacity',
        'paymentAccounts' => 'paymentAccounts',
        'updatedAt' => 'updated_at'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'sub' => 'setSub',
        'txn' => 'setTxn',
        'verifiedClaims' => 'setVerifiedClaims',
        'titlePrefix' => 'setTitlePrefix',
        'titleSuffix' => 'setTitleSuffix',
        'givenName' => 'setGivenName',
        'familyName' => 'setFamilyName',
        'middleName' => 'setMiddleName',
        'gender' => 'setGender',
        'birthdate' => 'setBirthdate',
        'birthnumber' => 'setBirthnumber',
        'age' => 'setAge',
        'majority' => 'setMajority',
        'dateOfDeath' => 'setDateOfDeath',
        'birthplace' => 'setBirthplace',
        'primaryNationality' => 'setPrimaryNationality',
        'nationalities' => 'setNationalities',
        'maritalstatus' => 'setMaritalstatus',
        'addresses' => 'setAddresses',
        'idcards' => 'setIdcards',
        'email' => 'setEmail',
        'phoneNumber' => 'setPhoneNumber',
        'pep' => 'setPep',
        'limitedLegalCapacity' => 'setLimitedLegalCapacity',
        'paymentAccounts' => 'setPaymentAccounts',
        'updatedAt' => 'setUpdatedAt'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'sub' => 'getSub',
        'txn' => 'getTxn',
        'verifiedClaims' => 'getVerifiedClaims',
        'titlePrefix' => 'getTitlePrefix',
        'titleSuffix' => 'getTitleSuffix',
        'givenName' => 'getGivenName',
        'familyName' => 'getFamilyName',
        'middleName' => 'getMiddleName',
        'gender' => 'getGender',
        'birthdate' => 'getBirthdate',
        'birthnumber' => 'getBirthnumber',
        'age' => 'getAge',
        'majority' => 'getMajority',
        'dateOfDeath' => 'getDateOfDeath',
        'birthplace' => 'getBirthplace',
        'primaryNationality' => 'getPrimaryNationality',
        'nationalities' => 'getNationalities',
        'maritalstatus' => 'getMaritalstatus',
        'addresses' => 'getAddresses',
        'idcards' => 'getIdcards',
        'email' => 'getEmail',
        'phoneNumber' => 'getPhoneNumber',
        'pep' => 'getPep',
        'limitedLegalCapacity' => 'getLimitedLegalCapacity',
        'paymentAccounts' => 'getPaymentAccounts',
        'updatedAt' => 'getUpdatedAt'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['sub'] = $data['sub'] ?? null;
        $this->container['txn'] = $data['txn'] ?? null;
        $this->container['verifiedClaims'] = $data['verifiedClaims'] ?? null;
        $this->container['titlePrefix'] = $data['titlePrefix'] ?? null;
        $this->container['titleSuffix'] = $data['titleSuffix'] ?? null;
        $this->container['givenName'] = $data['givenName'] ?? null;
        $this->container['familyName'] = $data['familyName'] ?? null;
        $this->container['middleName'] = $data['middleName'] ?? null;
        $this->container['gender'] = $data['gender'] ?? null;
        $this->container['birthdate'] = $data['birthdate'] ?? null;
        $this->container['birthnumber'] = $data['birthnumber'] ?? null;
        $this->container['age'] = $data['age'] ?? null;
        $this->container['majority'] = $data['majority'] ?? null;
        $this->container['dateOfDeath'] = $data['dateOfDeath'] ?? null;
        $this->container['birthplace'] = $data['birthplace'] ?? null;
        $this->container['primaryNationality'] = $data['primaryNationality'] ?? null;
        $this->container['nationalities'] = $data['nationalities'] ?? null;
        $this->container['maritalstatus'] = $data['maritalstatus'] ?? null;
        $this->container['addresses'] = $data['addresses'] ?? null;
        $this->container['idcards'] = $data['idcards'] ?? null;
        $this->container['email'] = $data['email'] ?? null;
        $this->container['phoneNumber'] = $data['phoneNumber'] ?? null;
        $this->container['pep'] = $data['pep'] ?? null;
        $this->container['limitedLegalCapacity'] = $data['limitedLegalCapacity'] ?? null;
        $this->container['paymentAccounts'] = $data['paymentAccounts'] ?? null;
        $this->container['updatedAt'] = $data['updatedAt'] ?? null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['sub'] === null) {
            $invalidProperties[] = "'sub' can't be null";
        }
        if ($this->container['txn'] === null) {
            $invalidProperties[] = "'txn' can't be null";
        }
        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets sub
     *
     * @return string
     */
    public function getSub()
    {
        return $this->container['sub'];
    }

    /**
     * Sets sub
     *
     * @param string $sub Identifier for the End-User at the Issuer.
     *
     * @return self
     */
    public function setSub($sub)
    {
        $this->container['sub'] = $sub;

        return $this;
    }

    /**
     * Gets txn
     *
     * @return string
     */
    public function getTxn()
    {
        return $this->container['txn'];
    }

    /**
     * Sets txn
     *
     * @param string $txn The txn Claim as defined in [RFC8417] is used in the context of this extension to build audit trails across the parties involved in an OpenID Connect transaction.
     *
     * @return self
     */
    public function setTxn($txn)
    {
        $this->container['txn'] = $txn;

        return $this;
    }

    /**
     * Gets verifiedClaims
     *
     * @return \Finbricks\Api\BankId\Model\VerifiedClaims|null
     */
    public function getVerifiedClaims()
    {
        return $this->container['verifiedClaims'];
    }

    /**
     * Sets verifiedClaims
     *
     * @param \Finbricks\Api\BankId\Model\VerifiedClaims|null $verifiedClaims verifiedClaims
     *
     * @return self
     */
    public function setVerifiedClaims($verifiedClaims)
    {
        $this->container['verifiedClaims'] = $verifiedClaims;

        return $this;
    }

    /**
     * Gets titlePrefix
     *
     * @return string|null
     */
    public function getTitlePrefix()
    {
        return $this->container['titlePrefix'];
    }

    /**
     * Sets titlePrefix
     *
     * @param string|null $titlePrefix End-User's title prefix.
     *
     * @return self
     */
    public function setTitlePrefix($titlePrefix)
    {
        $this->container['titlePrefix'] = $titlePrefix;

        return $this;
    }

    /**
     * Gets titleSuffix
     *
     * @return string|null
     */
    public function getTitleSuffix()
    {
        return $this->container['titleSuffix'];
    }

    /**
     * Sets titleSuffix
     *
     * @param string|null $titleSuffix End-User's title suffix.
     *
     * @return self
     */
    public function setTitleSuffix($titleSuffix)
    {
        $this->container['titleSuffix'] = $titleSuffix;

        return $this;
    }

    /**
     * Gets givenName
     *
     * @return string|null
     */
    public function getGivenName()
    {
        return $this->container['givenName'];
    }

    /**
     * Sets givenName
     *
     * @param string|null $givenName Given name(s) or first name(s) of the End-User. Note that in some cultures, people can have multiple given names; all can be present, with the names being separated by space characters.
     *
     * @return self
     */
    public function setGivenName($givenName)
    {
        $this->container['givenName'] = $givenName;

        return $this;
    }

    /**
     * Gets familyName
     *
     * @return string|null
     */
    public function getFamilyName()
    {
        return $this->container['familyName'];
    }

    /**
     * Sets familyName
     *
     * @param string|null $familyName Surname(s) or last name(s) of the End-User. Note that in some cultures, people can have multiple family names or no family name; all can be present, with the names being separated by space characters.
     *
     * @return self
     */
    public function setFamilyName($familyName)
    {
        $this->container['familyName'] = $familyName;

        return $this;
    }

    /**
     * Gets middleName
     *
     * @return string|null
     */
    public function getMiddleName()
    {
        return $this->container['middleName'];
    }

    /**
     * Sets middleName
     *
     * @param string|null $middleName Middle name(s) of the End-User. Note that in some cultures, people can have multiple middle names; all can be present, with the names being separated by space characters. Also note that in some cultures, middle names are not used.
     *
     * @return self
     */
    public function setMiddleName($middleName)
    {
        $this->container['middleName'] = $middleName;

        return $this;
    }

    /**
     * Gets gender
     *
     * @return \Finbricks\Api\BankId\Model\Gender|null
     */
    public function getGender()
    {
        return $this->container['gender'];
    }

    /**
     * Sets gender
     *
     * @param \Finbricks\Api\BankId\Model\Gender|null $gender gender
     *
     * @return self
     */
    public function setGender($gender)
    {
        $this->container['gender'] = $gender;

        return $this;
    }

    /**
     * Gets birthdate
     *
     * @return \DateTime|null
     */
    public function getBirthdate()
    {
        return $this->container['birthdate'];
    }

    /**
     * Sets birthdate
     *
     * @param \DateTime|null $birthdate End-User's birthday, represented as an ISO 8601:2004 [ISO8601-2004] YYYY-MM-DD format. The year MAY be 0000, indicating that it is omitted. To represent only the year, YYYY format is allowed. Note that depending on the underlying platform's date related function, providing just year can result in varying month and day, so the implementers need to take this factor into account to correctly process the dates.
     *
     * @return self
     */
    public function setBirthdate($birthdate)
    {
        $this->container['birthdate'] = $birthdate;

        return $this;
    }

    /**
     * Gets birthnumber
     *
     * @return string|null
     */
    public function getBirthnumber()
    {
        return $this->container['birthnumber'];
    }

    /**
     * Sets birthnumber
     *
     * @param string|null $birthnumber User's birth number. Birth number is required if nationality is Czech (\"CZ\").
     *
     * @return self
     */
    public function setBirthnumber($birthnumber)
    {
        $this->container['birthnumber'] = $birthnumber;

        return $this;
    }

    /**
     * Gets age
     *
     * @return float|null
     */
    public function getAge()
    {
        return $this->container['age'];
    }

    /**
     * Sets age
     *
     * @param float|null $age Current age of the client given in years.
     *
     * @return self
     */
    public function setAge($age)
    {
        $this->container['age'] = $age;

        return $this;
    }

    /**
     * Gets majority
     *
     * @return bool|null
     */
    public function getMajority()
    {
        return $this->container['majority'];
    }

    /**
     * Sets majority
     *
     * @param bool|null $majority An person is over the threshold of adulthood as recognized or declared in law.
     *
     * @return self
     */
    public function setMajority($majority)
    {
        $this->container['majority'] = $majority;

        return $this;
    }

    /**
     * Gets dateOfDeath
     *
     * @return string|null
     */
    public function getDateOfDeath()
    {
        return $this->container['dateOfDeath'];
    }

    /**
     * Sets dateOfDeath
     *
     * @param string|null $dateOfDeath Date of death of the client. Practically still null. Only in the case of updating data (not yet part of the standard definition) is it possible to receive a specific date.
     *
     * @return self
     */
    public function setDateOfDeath($dateOfDeath)
    {
        $this->container['dateOfDeath'] = $dateOfDeath;

        return $this;
    }

    /**
     * Gets birthplace
     *
     * @return string|null
     */
    public function getBirthplace()
    {
        return $this->container['birthplace'];
    }

    /**
     * Sets birthplace
     *
     * @param string|null $birthplace User's birth place.
     *
     * @return self
     */
    public function setBirthplace($birthplace)
    {
        $this->container['birthplace'] = $birthplace;

        return $this;
    }

    /**
     * Gets primaryNationality
     *
     * @return string|null
     */
    public function getPrimaryNationality()
    {
        return $this->container['primaryNationality'];
    }

    /**
     * Sets primaryNationality
     *
     * @param string|null $primaryNationality Optional element user's primary nationality, ISO 3166-1 format, subtype ALPHA-2. This means two letters in uppercase.
     *
     * @return self
     */
    public function setPrimaryNationality($primaryNationality)
    {
        $this->container['primaryNationality'] = $primaryNationality;

        return $this;
    }

    /**
     * Gets nationalities
     *
     * @return string[]|null
     */
    public function getNationalities()
    {
        return $this->container['nationalities'];
    }

    /**
     * Sets nationalities
     *
     * @param string[]|null $nationalities All user's nationalities, ISO 3166-1 format, subtype ALPHA-2. This means two letters in uppercase.
     *
     * @return self
     */
    public function setNationalities($nationalities)
    {
        $this->container['nationalities'] = $nationalities;

        return $this;
    }

    /**
     * Gets maritalstatus
     *
     * @return \Finbricks\Api\BankId\Model\Maritalstatus|null
     */
    public function getMaritalstatus()
    {
        return $this->container['maritalstatus'];
    }

    /**
     * Sets maritalstatus
     *
     * @param \Finbricks\Api\BankId\Model\Maritalstatus|null $maritalstatus maritalstatus
     *
     * @return self
     */
    public function setMaritalstatus($maritalstatus)
    {
        $this->container['maritalstatus'] = $maritalstatus;

        return $this;
    }

    /**
     * Gets addresses
     *
     * @return \Finbricks\Api\BankId\Model\Address[]|null
     */
    public function getAddresses()
    {
        return $this->container['addresses'];
    }

    /**
     * Sets addresses
     *
     * @param \Finbricks\Api\BankId\Model\Address[]|null $addresses User's address
     *
     * @return self
     */
    public function setAddresses($addresses)
    {
        $this->container['addresses'] = $addresses;

        return $this;
    }

    /**
     * Gets idcards
     *
     * @return \Finbricks\Api\BankId\Model\Idcard[]|null
     */
    public function getIdcards()
    {
        return $this->container['idcards'];
    }

    /**
     * Sets idcards
     *
     * @param \Finbricks\Api\BankId\Model\Idcard[]|null $idcards User's id cards
     *
     * @return self
     */
    public function setIdcards($idcards)
    {
        $this->container['idcards'] = $idcards;

        return $this;
    }

    /**
     * Gets email
     *
     * @return string|null
     */
    public function getEmail()
    {
        return $this->container['email'];
    }

    /**
     * Sets email
     *
     * @param string|null $email End-User's preferred e-mail address. Its value MUST conform to the RFC 5322 [RFC5322] addr-spec syntax. The API consumer MUST NOT rely upon this value being unique.
     *
     * @return self
     */
    public function setEmail($email)
    {
        $this->container['email'] = $email;

        return $this;
    }

    /**
     * Gets phoneNumber
     *
     * @return string|null
     */
    public function getPhoneNumber()
    {
        return $this->container['phoneNumber'];
    }

    /**
     * Sets phoneNumber
     *
     * @param string|null $phoneNumber End-User's preferred telephone number. E.164 [E.164] is RECOMMENDED as the format of this Claim, for example, +1 (425) 555-1212 or +56 (2) 687 2400. If the phone number contains an extension, it is RECOMMENDED that the extension be represented using the RFC 3966 [RFC3966] extension syntax, for example, +1 (604) 555-1234;ext=5678.
     *
     * @return self
     */
    public function setPhoneNumber($phoneNumber)
    {
        $this->container['phoneNumber'] = $phoneNumber;

        return $this;
    }

    /**
     * Gets pep
     *
     * @return bool|null
     */
    public function getPep()
    {
        return $this->container['pep'];
    }

    /**
     * Sets pep
     *
     * @param bool|null $pep Flag that the authenticated user is politically exposed person (PEP). In financial regulation, a politically exposed person is one who has been entrusted with a prominent public function. A PEP generally presents a higher risk for potential involvement in bribery and corruption by virtue of their position and the influence that they may hold.
     *
     * @return self
     */
    public function setPep($pep)
    {
        $this->container['pep'] = $pep;

        return $this;
    }

    /**
     * Gets limitedLegalCapacity
     *
     * @return bool|null
     */
    public function getLimitedLegalCapacity()
    {
        return $this->container['limitedLegalCapacity'];
    }

    /**
     * Sets limitedLegalCapacity
     *
     * @param bool|null $limitedLegalCapacity An indication of whether this is a person with limited legal capacity.
     *
     * @return self
     */
    public function setLimitedLegalCapacity($limitedLegalCapacity)
    {
        $this->container['limitedLegalCapacity'] = $limitedLegalCapacity;

        return $this;
    }

    /**
     * Gets paymentAccounts
     *
     * @return string[]|null
     */
    public function getPaymentAccounts()
    {
        return $this->container['paymentAccounts'];
    }

    /**
     * Sets paymentAccounts
     *
     * @param string[]|null $paymentAccounts User's payment account numbers in CZ IBAN format.
     *
     * @return self
     */
    public function setPaymentAccounts($paymentAccounts)
    {
        $this->container['paymentAccounts'] = $paymentAccounts;

        return $this;
    }

    /**
     * Gets updatedAt
     *
     * @return float|null
     */
    public function getUpdatedAt()
    {
        return $this->container['updatedAt'];
    }

    /**
     * Sets updatedAt
     *
     * @param float|null $updatedAt Time the End-User's information was last updated. Its value is a JSON number representing the number of seconds from 1970-01-01T0:0:0Z as measured in UTC until the date/time.
     *
     * @return self
     */
    public function setUpdatedAt($updatedAt)
    {
        $this->container['updatedAt'] = $updatedAt;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


