<?php
/**
 * Transaction
 *
 * PHP version 7.2
 *
 * @category Class
 * @package  Finbricks\Api\Info
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Finbricks.com API - Account information
 *
 * Finbricks.com API - Account information
 *
 * The version of the OpenAPI document: 1.0.12
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 5.1.1
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace Finbricks\Api\Info\Model;

use \ArrayAccess;
use \Finbricks\Api\Info\ObjectSerializer;

/**
 * Transaction Class Doc Comment
 *
 * @category Class
 * @description List of transactions
 * @package  Finbricks\Api\Info
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<TKey, TValue>
 * @template TKey int|null
 * @template TValue mixed|null
 */
class Transaction implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'Transaction';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'entryReference' => 'string',
        'amount' => '\Finbricks\Api\Info\Model\Amount',
        'creditDebitIndicator' => '\Finbricks\Api\Info\Model\CreditDebitIndicator',
        'reversalIndicator' => 'bool',
        'status' => 'string',
        'bookingDate' => '\Finbricks\Api\Info\Model\BookingDate',
        'valueDate' => '\Finbricks\Api\Info\Model\ValueDate',
        'bankTransactionCode' => '\Finbricks\Api\Info\Model\BankTransactionCode',
        'entryDetails' => '\Finbricks\Api\Info\Model\EntryDetails'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'entryReference' => null,
        'amount' => null,
        'creditDebitIndicator' => null,
        'reversalIndicator' => null,
        'status' => null,
        'bookingDate' => null,
        'valueDate' => null,
        'bankTransactionCode' => null,
        'entryDetails' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'entryReference' => 'entryReference',
        'amount' => 'amount',
        'creditDebitIndicator' => 'creditDebitIndicator',
        'reversalIndicator' => 'reversalIndicator',
        'status' => 'status',
        'bookingDate' => 'bookingDate',
        'valueDate' => 'valueDate',
        'bankTransactionCode' => 'bankTransactionCode',
        'entryDetails' => 'entryDetails'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'entryReference' => 'setEntryReference',
        'amount' => 'setAmount',
        'creditDebitIndicator' => 'setCreditDebitIndicator',
        'reversalIndicator' => 'setReversalIndicator',
        'status' => 'setStatus',
        'bookingDate' => 'setBookingDate',
        'valueDate' => 'setValueDate',
        'bankTransactionCode' => 'setBankTransactionCode',
        'entryDetails' => 'setEntryDetails'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'entryReference' => 'getEntryReference',
        'amount' => 'getAmount',
        'creditDebitIndicator' => 'getCreditDebitIndicator',
        'reversalIndicator' => 'getReversalIndicator',
        'status' => 'getStatus',
        'bookingDate' => 'getBookingDate',
        'valueDate' => 'getValueDate',
        'bankTransactionCode' => 'getBankTransactionCode',
        'entryDetails' => 'getEntryDetails'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['entryReference'] = $data['entryReference'] ?? null;
        $this->container['amount'] = $data['amount'] ?? null;
        $this->container['creditDebitIndicator'] = $data['creditDebitIndicator'] ?? null;
        $this->container['reversalIndicator'] = $data['reversalIndicator'] ?? null;
        $this->container['status'] = $data['status'] ?? null;
        $this->container['bookingDate'] = $data['bookingDate'] ?? null;
        $this->container['valueDate'] = $data['valueDate'] ?? null;
        $this->container['bankTransactionCode'] = $data['bankTransactionCode'] ?? null;
        $this->container['entryDetails'] = $data['entryDetails'] ?? null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets entryReference
     *
     * @return string|null
     */
    public function getEntryReference()
    {
        return $this->container['entryReference'];
    }

    /**
     * Sets entryReference
     *
     * @param string|null $entryReference Identification no. of the payment assigned by the bank
     *
     * @return self
     */
    public function setEntryReference($entryReference)
    {
        $this->container['entryReference'] = $entryReference;

        return $this;
    }

    /**
     * Gets amount
     *
     * @return \Finbricks\Api\Info\Model\Amount|null
     */
    public function getAmount()
    {
        return $this->container['amount'];
    }

    /**
     * Sets amount
     *
     * @param \Finbricks\Api\Info\Model\Amount|null $amount amount
     *
     * @return self
     */
    public function setAmount($amount)
    {
        $this->container['amount'] = $amount;

        return $this;
    }

    /**
     * Gets creditDebitIndicator
     *
     * @return \Finbricks\Api\Info\Model\CreditDebitIndicator|null
     */
    public function getCreditDebitIndicator()
    {
        return $this->container['creditDebitIndicator'];
    }

    /**
     * Sets creditDebitIndicator
     *
     * @param \Finbricks\Api\Info\Model\CreditDebitIndicator|null $creditDebitIndicator creditDebitIndicator
     *
     * @return self
     */
    public function setCreditDebitIndicator($creditDebitIndicator)
    {
        $this->container['creditDebitIndicator'] = $creditDebitIndicator;

        return $this;
    }

    /**
     * Gets reversalIndicator
     *
     * @return bool|null
     */
    public function getReversalIndicator()
    {
        return $this->container['reversalIndicator'];
    }

    /**
     * Sets reversalIndicator
     *
     * @param bool|null $reversalIndicator Indication of whether it is a cancellation. An expression of whether it is a cancellation or not is marked with one of the codes below:  - true: It is cancellation - false: It is not cancellation\"
     *
     * @return self
     */
    public function setReversalIndicator($reversalIndicator)
    {
        $this->container['reversalIndicator'] = $reversalIndicator;

        return $this;
    }

    /**
     * Gets status
     *
     * @return string|null
     */
    public function getStatus()
    {
        return $this->container['status'];
    }

    /**
     * Sets status
     *
     * @param string|null $status Item status (debited or credited payments) of the account from the point of view of the bank. The statement will present only posted items, with the constant BOOK, or blocked items, with the constant PDNG.  Example values:  * __BOOK__ - posted items * __PDNG__ - blocked items * INFO - status specific for some banks
     *
     * @return self
     */
    public function setStatus($status)
    {
        $this->container['status'] = $status;

        return $this;
    }

    /**
     * Gets bookingDate
     *
     * @return \Finbricks\Api\Info\Model\BookingDate|null
     */
    public function getBookingDate()
    {
        return $this->container['bookingDate'];
    }

    /**
     * Sets bookingDate
     *
     * @param \Finbricks\Api\Info\Model\BookingDate|null $bookingDate bookingDate
     *
     * @return self
     */
    public function setBookingDate($bookingDate)
    {
        $this->container['bookingDate'] = $bookingDate;

        return $this;
    }

    /**
     * Gets valueDate
     *
     * @return \Finbricks\Api\Info\Model\ValueDate|null
     */
    public function getValueDate()
    {
        return $this->container['valueDate'];
    }

    /**
     * Sets valueDate
     *
     * @param \Finbricks\Api\Info\Model\ValueDate|null $valueDate valueDate
     *
     * @return self
     */
    public function setValueDate($valueDate)
    {
        $this->container['valueDate'] = $valueDate;

        return $this;
    }

    /**
     * Gets bankTransactionCode
     *
     * @return \Finbricks\Api\Info\Model\BankTransactionCode|null
     */
    public function getBankTransactionCode()
    {
        return $this->container['bankTransactionCode'];
    }

    /**
     * Sets bankTransactionCode
     *
     * @param \Finbricks\Api\Info\Model\BankTransactionCode|null $bankTransactionCode bankTransactionCode
     *
     * @return self
     */
    public function setBankTransactionCode($bankTransactionCode)
    {
        $this->container['bankTransactionCode'] = $bankTransactionCode;

        return $this;
    }

    /**
     * Gets entryDetails
     *
     * @return \Finbricks\Api\Info\Model\EntryDetails|null
     */
    public function getEntryDetails()
    {
        return $this->container['entryDetails'];
    }

    /**
     * Sets entryDetails
     *
     * @param \Finbricks\Api\Info\Model\EntryDetails|null $entryDetails entryDetails
     *
     * @return self
     */
    public function setEntryDetails($entryDetails)
    {
        $this->container['entryDetails'] = $entryDetails;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


