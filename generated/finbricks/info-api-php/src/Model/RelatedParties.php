<?php
/**
 * RelatedParties
 *
 * PHP version 7.2
 *
 * @category Class
 * @package  Finbricks\Api\Info
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Finbricks.com API - Account information
 *
 * Finbricks.com API - Account information
 *
 * The version of the OpenAPI document: 1.0.11
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 5.1.1
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace Finbricks\Api\Info\Model;

use \ArrayAccess;
use \Finbricks\Api\Info\ObjectSerializer;

/**
 * RelatedParties Class Doc Comment
 *
 * @category Class
 * @description Information on the payer, the payer&#39;s account and the original payer and payee, the payee&#39;s account and the final payee in the payment.
 * @package  Finbricks\Api\Info
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<TKey, TValue>
 * @template TKey int|null
 * @template TValue mixed|null
 */
class RelatedParties implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'RelatedParties';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'debtor' => '\Finbricks\Api\Info\Model\Debtor',
        'debtorAccount' => '\Finbricks\Api\Info\Model\DebtorAccount',
        'ultimateDebtor' => '\Finbricks\Api\Info\Model\UltimateDebtor',
        'creditor' => '\Finbricks\Api\Info\Model\Creditor',
        'creditorAccount' => '\Finbricks\Api\Info\Model\CreditorAccount',
        'ultimateCreditor' => '\Finbricks\Api\Info\Model\UltimateCreditor',
        'proprietary' => '\Finbricks\Api\Info\Model\RelatedPartiesProprietary'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'debtor' => null,
        'debtorAccount' => null,
        'ultimateDebtor' => null,
        'creditor' => null,
        'creditorAccount' => null,
        'ultimateCreditor' => null,
        'proprietary' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'debtor' => 'debtor',
        'debtorAccount' => 'debtorAccount',
        'ultimateDebtor' => 'ultimateDebtor',
        'creditor' => 'creditor',
        'creditorAccount' => 'creditorAccount',
        'ultimateCreditor' => 'ultimateCreditor',
        'proprietary' => 'proprietary'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'debtor' => 'setDebtor',
        'debtorAccount' => 'setDebtorAccount',
        'ultimateDebtor' => 'setUltimateDebtor',
        'creditor' => 'setCreditor',
        'creditorAccount' => 'setCreditorAccount',
        'ultimateCreditor' => 'setUltimateCreditor',
        'proprietary' => 'setProprietary'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'debtor' => 'getDebtor',
        'debtorAccount' => 'getDebtorAccount',
        'ultimateDebtor' => 'getUltimateDebtor',
        'creditor' => 'getCreditor',
        'creditorAccount' => 'getCreditorAccount',
        'ultimateCreditor' => 'getUltimateCreditor',
        'proprietary' => 'getProprietary'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['debtor'] = $data['debtor'] ?? null;
        $this->container['debtorAccount'] = $data['debtorAccount'] ?? null;
        $this->container['ultimateDebtor'] = $data['ultimateDebtor'] ?? null;
        $this->container['creditor'] = $data['creditor'] ?? null;
        $this->container['creditorAccount'] = $data['creditorAccount'] ?? null;
        $this->container['ultimateCreditor'] = $data['ultimateCreditor'] ?? null;
        $this->container['proprietary'] = $data['proprietary'] ?? null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets debtor
     *
     * @return \Finbricks\Api\Info\Model\Debtor|null
     */
    public function getDebtor()
    {
        return $this->container['debtor'];
    }

    /**
     * Sets debtor
     *
     * @param \Finbricks\Api\Info\Model\Debtor|null $debtor debtor
     *
     * @return self
     */
    public function setDebtor($debtor)
    {
        $this->container['debtor'] = $debtor;

        return $this;
    }

    /**
     * Gets debtorAccount
     *
     * @return \Finbricks\Api\Info\Model\DebtorAccount|null
     */
    public function getDebtorAccount()
    {
        return $this->container['debtorAccount'];
    }

    /**
     * Sets debtorAccount
     *
     * @param \Finbricks\Api\Info\Model\DebtorAccount|null $debtorAccount debtorAccount
     *
     * @return self
     */
    public function setDebtorAccount($debtorAccount)
    {
        $this->container['debtorAccount'] = $debtorAccount;

        return $this;
    }

    /**
     * Gets ultimateDebtor
     *
     * @return \Finbricks\Api\Info\Model\UltimateDebtor|null
     */
    public function getUltimateDebtor()
    {
        return $this->container['ultimateDebtor'];
    }

    /**
     * Sets ultimateDebtor
     *
     * @param \Finbricks\Api\Info\Model\UltimateDebtor|null $ultimateDebtor ultimateDebtor
     *
     * @return self
     */
    public function setUltimateDebtor($ultimateDebtor)
    {
        $this->container['ultimateDebtor'] = $ultimateDebtor;

        return $this;
    }

    /**
     * Gets creditor
     *
     * @return \Finbricks\Api\Info\Model\Creditor|null
     */
    public function getCreditor()
    {
        return $this->container['creditor'];
    }

    /**
     * Sets creditor
     *
     * @param \Finbricks\Api\Info\Model\Creditor|null $creditor creditor
     *
     * @return self
     */
    public function setCreditor($creditor)
    {
        $this->container['creditor'] = $creditor;

        return $this;
    }

    /**
     * Gets creditorAccount
     *
     * @return \Finbricks\Api\Info\Model\CreditorAccount|null
     */
    public function getCreditorAccount()
    {
        return $this->container['creditorAccount'];
    }

    /**
     * Sets creditorAccount
     *
     * @param \Finbricks\Api\Info\Model\CreditorAccount|null $creditorAccount creditorAccount
     *
     * @return self
     */
    public function setCreditorAccount($creditorAccount)
    {
        $this->container['creditorAccount'] = $creditorAccount;

        return $this;
    }

    /**
     * Gets ultimateCreditor
     *
     * @return \Finbricks\Api\Info\Model\UltimateCreditor|null
     */
    public function getUltimateCreditor()
    {
        return $this->container['ultimateCreditor'];
    }

    /**
     * Sets ultimateCreditor
     *
     * @param \Finbricks\Api\Info\Model\UltimateCreditor|null $ultimateCreditor ultimateCreditor
     *
     * @return self
     */
    public function setUltimateCreditor($ultimateCreditor)
    {
        $this->container['ultimateCreditor'] = $ultimateCreditor;

        return $this;
    }

    /**
     * Gets proprietary
     *
     * @return \Finbricks\Api\Info\Model\RelatedPartiesProprietary|null
     */
    public function getProprietary()
    {
        return $this->container['proprietary'];
    }

    /**
     * Sets proprietary
     *
     * @param \Finbricks\Api\Info\Model\RelatedPartiesProprietary|null $proprietary proprietary
     *
     * @return self
     */
    public function setProprietary($proprietary)
    {
        $this->container['proprietary'] = $proprietary;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


