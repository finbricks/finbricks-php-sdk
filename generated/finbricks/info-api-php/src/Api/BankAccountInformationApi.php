<?php
/**
 * BankAccountInformationApi
 * PHP version 7.2
 *
 * @category Class
 * @package  Finbricks\Api\Info
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Finbricks.com API - Account information
 *
 * Finbricks.com API - Account information
 *
 * The version of the OpenAPI document: 1.0.12
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 5.1.1
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace Finbricks\Api\Info\Api;

use GuzzleHttp\Client;
use GuzzleHttp\ClientInterface;
use GuzzleHttp\Exception\RequestException;
use GuzzleHttp\Psr7\MultipartStream;
use GuzzleHttp\Psr7\Request;
use GuzzleHttp\RequestOptions;
use Finbricks\Api\Info\ApiException;
use Finbricks\Api\Info\Configuration;
use Finbricks\Api\Info\HeaderSelector;
use Finbricks\Api\Info\ObjectSerializer;

/**
 * BankAccountInformationApi Class Doc Comment
 *
 * @category Class
 * @package  Finbricks\Api\Info
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */
class BankAccountInformationApi
{
    /**
     * @var ClientInterface
     */
    protected $client;

    /**
     * @var Configuration
     */
    protected $config;

    /**
     * @var HeaderSelector
     */
    protected $headerSelector;

    /**
     * @var int Host index
     */
    protected $hostIndex;

    /**
     * @param ClientInterface $client
     * @param Configuration   $config
     * @param HeaderSelector  $selector
     * @param int             $hostIndex (Optional) host index to select the list of hosts if defined in the OpenAPI spec
     */
    public function __construct(
        ClientInterface $client = null,
        Configuration $config = null,
        HeaderSelector $selector = null,
        $hostIndex = 0
    ) {
        $this->client = $client ?: new Client();
        $this->config = $config ?: new Configuration();
        $this->headerSelector = $selector ?: new HeaderSelector();
        $this->hostIndex = $hostIndex;
    }

    /**
     * Set the host index
     *
     * @param int $hostIndex Host index (required)
     */
    public function setHostIndex($hostIndex): void
    {
        $this->hostIndex = $hostIndex;
    }

    /**
     * Get the host index
     *
     * @return int Host index
     */
    public function getHostIndex()
    {
        return $this->hostIndex;
    }

    /**
     * @return Configuration
     */
    public function getConfig()
    {
        return $this->config;
    }

    /**
     * Operation accountBalanceGet
     *
     * Balances for user&#39;s accounts
     *
     * @param  string $merchantId Unique merchant identifier from merchant registration process. (required)
     * @param  string $paymentProvider In case you would like to choose the payer bank on your side (e-shop), fill in the value.  In case you would like to let the end-user select the bank on Zaplaceno.cz front-end, leave it empty.  Enumeration of possible values can be obtained from __/paymentProviders__ endpoint. (required)
     * @param  string $bankAccountId API payment account identifier from the response to a query on the list of accounts. (required)
     * @param  string $signature Signature of the request. For more information, see chapter [Signing the request](#section/Security/Signing-the-request). (required)
     * @param  string $clientId Identification of client (end-user). &#x60;clientId&#x60; or &#x60;operationId&#x60; is required. (optional)
     * @param  string $operationId End-user identifier assigned by Finbricks.com. &#x60;clientId&#x60; or &#x60;operationId&#x60; is required. For more information, see chapter [Identifiers](#section/Introduction/Identifiers). (optional)
     *
     * @throws \Finbricks\Api\Info\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Finbricks\Api\Info\Model\AccountBalance|\Finbricks\Api\Info\Model\Error
     */
    public function accountBalanceGet($merchantId, $paymentProvider, $bankAccountId, $signature, $clientId = null, $operationId = null)
    {
        list($response) = $this->accountBalanceGetWithHttpInfo($merchantId, $paymentProvider, $bankAccountId, $signature, $clientId, $operationId);
        return $response;
    }

    /**
     * Operation accountBalanceGetWithHttpInfo
     *
     * Balances for user&#39;s accounts
     *
     * @param  string $merchantId Unique merchant identifier from merchant registration process. (required)
     * @param  string $paymentProvider In case you would like to choose the payer bank on your side (e-shop), fill in the value.  In case you would like to let the end-user select the bank on Zaplaceno.cz front-end, leave it empty.  Enumeration of possible values can be obtained from __/paymentProviders__ endpoint. (required)
     * @param  string $bankAccountId API payment account identifier from the response to a query on the list of accounts. (required)
     * @param  string $signature Signature of the request. For more information, see chapter [Signing the request](#section/Security/Signing-the-request). (required)
     * @param  string $clientId Identification of client (end-user). &#x60;clientId&#x60; or &#x60;operationId&#x60; is required. (optional)
     * @param  string $operationId End-user identifier assigned by Finbricks.com. &#x60;clientId&#x60; or &#x60;operationId&#x60; is required. For more information, see chapter [Identifiers](#section/Introduction/Identifiers). (optional)
     *
     * @throws \Finbricks\Api\Info\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Finbricks\Api\Info\Model\AccountBalance|\Finbricks\Api\Info\Model\Error, HTTP status code, HTTP response headers (array of strings)
     */
    public function accountBalanceGetWithHttpInfo($merchantId, $paymentProvider, $bankAccountId, $signature, $clientId = null, $operationId = null)
    {
        $request = $this->accountBalanceGetRequest($merchantId, $paymentProvider, $bankAccountId, $signature, $clientId, $operationId);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\Finbricks\Api\Info\Model\AccountBalance' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Finbricks\Api\Info\Model\AccountBalance', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                default:
                    if ('\Finbricks\Api\Info\Model\Error' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Finbricks\Api\Info\Model\Error', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\Finbricks\Api\Info\Model\AccountBalance';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Finbricks\Api\Info\Model\AccountBalance',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                default:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Finbricks\Api\Info\Model\Error',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation accountBalanceGetAsync
     *
     * Balances for user&#39;s accounts
     *
     * @param  string $merchantId Unique merchant identifier from merchant registration process. (required)
     * @param  string $paymentProvider In case you would like to choose the payer bank on your side (e-shop), fill in the value.  In case you would like to let the end-user select the bank on Zaplaceno.cz front-end, leave it empty.  Enumeration of possible values can be obtained from __/paymentProviders__ endpoint. (required)
     * @param  string $bankAccountId API payment account identifier from the response to a query on the list of accounts. (required)
     * @param  string $signature Signature of the request. For more information, see chapter [Signing the request](#section/Security/Signing-the-request). (required)
     * @param  string $clientId Identification of client (end-user). &#x60;clientId&#x60; or &#x60;operationId&#x60; is required. (optional)
     * @param  string $operationId End-user identifier assigned by Finbricks.com. &#x60;clientId&#x60; or &#x60;operationId&#x60; is required. For more information, see chapter [Identifiers](#section/Introduction/Identifiers). (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function accountBalanceGetAsync($merchantId, $paymentProvider, $bankAccountId, $signature, $clientId = null, $operationId = null)
    {
        return $this->accountBalanceGetAsyncWithHttpInfo($merchantId, $paymentProvider, $bankAccountId, $signature, $clientId, $operationId)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation accountBalanceGetAsyncWithHttpInfo
     *
     * Balances for user&#39;s accounts
     *
     * @param  string $merchantId Unique merchant identifier from merchant registration process. (required)
     * @param  string $paymentProvider In case you would like to choose the payer bank on your side (e-shop), fill in the value.  In case you would like to let the end-user select the bank on Zaplaceno.cz front-end, leave it empty.  Enumeration of possible values can be obtained from __/paymentProviders__ endpoint. (required)
     * @param  string $bankAccountId API payment account identifier from the response to a query on the list of accounts. (required)
     * @param  string $signature Signature of the request. For more information, see chapter [Signing the request](#section/Security/Signing-the-request). (required)
     * @param  string $clientId Identification of client (end-user). &#x60;clientId&#x60; or &#x60;operationId&#x60; is required. (optional)
     * @param  string $operationId End-user identifier assigned by Finbricks.com. &#x60;clientId&#x60; or &#x60;operationId&#x60; is required. For more information, see chapter [Identifiers](#section/Introduction/Identifiers). (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function accountBalanceGetAsyncWithHttpInfo($merchantId, $paymentProvider, $bankAccountId, $signature, $clientId = null, $operationId = null)
    {
        $returnType = '\Finbricks\Api\Info\Model\AccountBalance';
        $request = $this->accountBalanceGetRequest($merchantId, $paymentProvider, $bankAccountId, $signature, $clientId, $operationId);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'accountBalanceGet'
     *
     * @param  string $merchantId Unique merchant identifier from merchant registration process. (required)
     * @param  string $paymentProvider In case you would like to choose the payer bank on your side (e-shop), fill in the value.  In case you would like to let the end-user select the bank on Zaplaceno.cz front-end, leave it empty.  Enumeration of possible values can be obtained from __/paymentProviders__ endpoint. (required)
     * @param  string $bankAccountId API payment account identifier from the response to a query on the list of accounts. (required)
     * @param  string $signature Signature of the request. For more information, see chapter [Signing the request](#section/Security/Signing-the-request). (required)
     * @param  string $clientId Identification of client (end-user). &#x60;clientId&#x60; or &#x60;operationId&#x60; is required. (optional)
     * @param  string $operationId End-user identifier assigned by Finbricks.com. &#x60;clientId&#x60; or &#x60;operationId&#x60; is required. For more information, see chapter [Identifiers](#section/Introduction/Identifiers). (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function accountBalanceGetRequest($merchantId, $paymentProvider, $bankAccountId, $signature, $clientId = null, $operationId = null)
    {
        // verify the required parameter 'merchantId' is set
        if ($merchantId === null || (is_array($merchantId) && count($merchantId) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $merchantId when calling accountBalanceGet'
            );
        }
        // verify the required parameter 'paymentProvider' is set
        if ($paymentProvider === null || (is_array($paymentProvider) && count($paymentProvider) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $paymentProvider when calling accountBalanceGet'
            );
        }
        // verify the required parameter 'bankAccountId' is set
        if ($bankAccountId === null || (is_array($bankAccountId) && count($bankAccountId) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $bankAccountId when calling accountBalanceGet'
            );
        }
        // verify the required parameter 'signature' is set
        if ($signature === null || (is_array($signature) && count($signature) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $signature when calling accountBalanceGet'
            );
        }

        $resourcePath = '/account/balance';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($merchantId !== null) {
            if('form' === 'form' && is_array($merchantId)) {
                foreach($merchantId as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['merchantId'] = $merchantId;
            }
        }
        // query params
        if ($clientId !== null) {
            if('form' === 'form' && is_array($clientId)) {
                foreach($clientId as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['clientId'] = $clientId;
            }
        }
        // query params
        if ($operationId !== null) {
            if('form' === 'form' && is_array($operationId)) {
                foreach($operationId as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['operationId'] = $operationId;
            }
        }
        // query params
        if ($paymentProvider !== null) {
            if('form' === 'form' && is_array($paymentProvider)) {
                foreach($paymentProvider as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['paymentProvider'] = $paymentProvider;
            }
        }
        // query params
        if ($bankAccountId !== null) {
            if('form' === 'form' && is_array($bankAccountId)) {
                foreach($bankAccountId as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['bankAccountId'] = $bankAccountId;
            }
        }

        // header params
        if ($signature !== null) {
            $headerParams['signature'] = ObjectSerializer::toHeaderValue($signature);
        }



        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation accountListGet
     *
     * List of user&#39;s accounts
     *
     * @param  string $merchantId Unique merchant identifier from merchant registration process. (required)
     * @param  string $paymentProvider In case you would like to choose the payer bank on your side (e-shop), fill in the value.  In case you would like to let the end-user select the bank on Zaplaceno.cz front-end, leave it empty.  Enumeration of possible values can be obtained from __/paymentProviders__ endpoint. (required)
     * @param  string $signature Signature of the request. For more information, see chapter [Signing the request](#section/Security/Signing-the-request). (required)
     * @param  string $clientId Identification of client (end-user). &#x60;clientId&#x60; or &#x60;operationId&#x60; is required. (optional)
     * @param  string $operationId End-user identifier assigned by Finbricks.com. &#x60;clientId&#x60; or &#x60;operationId&#x60; is required. For more information, see chapter [Identifiers](#section/Introduction/Identifiers). (optional)
     *
     * @throws \Finbricks\Api\Info\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Finbricks\Api\Info\Model\AccountList|\Finbricks\Api\Info\Model\Error
     */
    public function accountListGet($merchantId, $paymentProvider, $signature, $clientId = null, $operationId = null)
    {
        list($response) = $this->accountListGetWithHttpInfo($merchantId, $paymentProvider, $signature, $clientId, $operationId);
        return $response;
    }

    /**
     * Operation accountListGetWithHttpInfo
     *
     * List of user&#39;s accounts
     *
     * @param  string $merchantId Unique merchant identifier from merchant registration process. (required)
     * @param  string $paymentProvider In case you would like to choose the payer bank on your side (e-shop), fill in the value.  In case you would like to let the end-user select the bank on Zaplaceno.cz front-end, leave it empty.  Enumeration of possible values can be obtained from __/paymentProviders__ endpoint. (required)
     * @param  string $signature Signature of the request. For more information, see chapter [Signing the request](#section/Security/Signing-the-request). (required)
     * @param  string $clientId Identification of client (end-user). &#x60;clientId&#x60; or &#x60;operationId&#x60; is required. (optional)
     * @param  string $operationId End-user identifier assigned by Finbricks.com. &#x60;clientId&#x60; or &#x60;operationId&#x60; is required. For more information, see chapter [Identifiers](#section/Introduction/Identifiers). (optional)
     *
     * @throws \Finbricks\Api\Info\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Finbricks\Api\Info\Model\AccountList|\Finbricks\Api\Info\Model\Error, HTTP status code, HTTP response headers (array of strings)
     */
    public function accountListGetWithHttpInfo($merchantId, $paymentProvider, $signature, $clientId = null, $operationId = null)
    {
        $request = $this->accountListGetRequest($merchantId, $paymentProvider, $signature, $clientId, $operationId);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\Finbricks\Api\Info\Model\AccountList' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Finbricks\Api\Info\Model\AccountList', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                default:
                    if ('\Finbricks\Api\Info\Model\Error' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Finbricks\Api\Info\Model\Error', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\Finbricks\Api\Info\Model\AccountList';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Finbricks\Api\Info\Model\AccountList',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                default:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Finbricks\Api\Info\Model\Error',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation accountListGetAsync
     *
     * List of user&#39;s accounts
     *
     * @param  string $merchantId Unique merchant identifier from merchant registration process. (required)
     * @param  string $paymentProvider In case you would like to choose the payer bank on your side (e-shop), fill in the value.  In case you would like to let the end-user select the bank on Zaplaceno.cz front-end, leave it empty.  Enumeration of possible values can be obtained from __/paymentProviders__ endpoint. (required)
     * @param  string $signature Signature of the request. For more information, see chapter [Signing the request](#section/Security/Signing-the-request). (required)
     * @param  string $clientId Identification of client (end-user). &#x60;clientId&#x60; or &#x60;operationId&#x60; is required. (optional)
     * @param  string $operationId End-user identifier assigned by Finbricks.com. &#x60;clientId&#x60; or &#x60;operationId&#x60; is required. For more information, see chapter [Identifiers](#section/Introduction/Identifiers). (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function accountListGetAsync($merchantId, $paymentProvider, $signature, $clientId = null, $operationId = null)
    {
        return $this->accountListGetAsyncWithHttpInfo($merchantId, $paymentProvider, $signature, $clientId, $operationId)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation accountListGetAsyncWithHttpInfo
     *
     * List of user&#39;s accounts
     *
     * @param  string $merchantId Unique merchant identifier from merchant registration process. (required)
     * @param  string $paymentProvider In case you would like to choose the payer bank on your side (e-shop), fill in the value.  In case you would like to let the end-user select the bank on Zaplaceno.cz front-end, leave it empty.  Enumeration of possible values can be obtained from __/paymentProviders__ endpoint. (required)
     * @param  string $signature Signature of the request. For more information, see chapter [Signing the request](#section/Security/Signing-the-request). (required)
     * @param  string $clientId Identification of client (end-user). &#x60;clientId&#x60; or &#x60;operationId&#x60; is required. (optional)
     * @param  string $operationId End-user identifier assigned by Finbricks.com. &#x60;clientId&#x60; or &#x60;operationId&#x60; is required. For more information, see chapter [Identifiers](#section/Introduction/Identifiers). (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function accountListGetAsyncWithHttpInfo($merchantId, $paymentProvider, $signature, $clientId = null, $operationId = null)
    {
        $returnType = '\Finbricks\Api\Info\Model\AccountList';
        $request = $this->accountListGetRequest($merchantId, $paymentProvider, $signature, $clientId, $operationId);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'accountListGet'
     *
     * @param  string $merchantId Unique merchant identifier from merchant registration process. (required)
     * @param  string $paymentProvider In case you would like to choose the payer bank on your side (e-shop), fill in the value.  In case you would like to let the end-user select the bank on Zaplaceno.cz front-end, leave it empty.  Enumeration of possible values can be obtained from __/paymentProviders__ endpoint. (required)
     * @param  string $signature Signature of the request. For more information, see chapter [Signing the request](#section/Security/Signing-the-request). (required)
     * @param  string $clientId Identification of client (end-user). &#x60;clientId&#x60; or &#x60;operationId&#x60; is required. (optional)
     * @param  string $operationId End-user identifier assigned by Finbricks.com. &#x60;clientId&#x60; or &#x60;operationId&#x60; is required. For more information, see chapter [Identifiers](#section/Introduction/Identifiers). (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function accountListGetRequest($merchantId, $paymentProvider, $signature, $clientId = null, $operationId = null)
    {
        // verify the required parameter 'merchantId' is set
        if ($merchantId === null || (is_array($merchantId) && count($merchantId) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $merchantId when calling accountListGet'
            );
        }
        // verify the required parameter 'paymentProvider' is set
        if ($paymentProvider === null || (is_array($paymentProvider) && count($paymentProvider) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $paymentProvider when calling accountListGet'
            );
        }
        // verify the required parameter 'signature' is set
        if ($signature === null || (is_array($signature) && count($signature) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $signature when calling accountListGet'
            );
        }

        $resourcePath = '/account/list';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($merchantId !== null) {
            if('form' === 'form' && is_array($merchantId)) {
                foreach($merchantId as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['merchantId'] = $merchantId;
            }
        }
        // query params
        if ($clientId !== null) {
            if('form' === 'form' && is_array($clientId)) {
                foreach($clientId as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['clientId'] = $clientId;
            }
        }
        // query params
        if ($operationId !== null) {
            if('form' === 'form' && is_array($operationId)) {
                foreach($operationId as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['operationId'] = $operationId;
            }
        }
        // query params
        if ($paymentProvider !== null) {
            if('form' === 'form' && is_array($paymentProvider)) {
                foreach($paymentProvider as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['paymentProvider'] = $paymentProvider;
            }
        }

        // header params
        if ($signature !== null) {
            $headerParams['signature'] = ObjectSerializer::toHeaderValue($signature);
        }



        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation accountListWithBalanceGet
     *
     * User&#39;s accounts with balances
     *
     * @param  string $merchantId Unique merchant identifier from merchant registration process. (required)
     * @param  string $paymentProvider In case you would like to choose the payer bank on your side (e-shop), fill in the value.  In case you would like to let the end-user select the bank on Zaplaceno.cz front-end, leave it empty.  Enumeration of possible values can be obtained from __/paymentProviders__ endpoint. (required)
     * @param  string $signature Signature of the request. For more information, see chapter [Signing the request](#section/Security/Signing-the-request). (required)
     * @param  string $clientId Identification of client (end-user). &#x60;clientId&#x60; or &#x60;operationId&#x60; is required. (optional)
     * @param  string $operationId End-user identifier assigned by Finbricks.com. &#x60;clientId&#x60; or &#x60;operationId&#x60; is required. For more information, see chapter [Identifiers](#section/Introduction/Identifiers). (optional)
     *
     * @throws \Finbricks\Api\Info\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return object[]|\Finbricks\Api\Info\Model\Error
     */
    public function accountListWithBalanceGet($merchantId, $paymentProvider, $signature, $clientId = null, $operationId = null)
    {
        list($response) = $this->accountListWithBalanceGetWithHttpInfo($merchantId, $paymentProvider, $signature, $clientId, $operationId);
        return $response;
    }

    /**
     * Operation accountListWithBalanceGetWithHttpInfo
     *
     * User&#39;s accounts with balances
     *
     * @param  string $merchantId Unique merchant identifier from merchant registration process. (required)
     * @param  string $paymentProvider In case you would like to choose the payer bank on your side (e-shop), fill in the value.  In case you would like to let the end-user select the bank on Zaplaceno.cz front-end, leave it empty.  Enumeration of possible values can be obtained from __/paymentProviders__ endpoint. (required)
     * @param  string $signature Signature of the request. For more information, see chapter [Signing the request](#section/Security/Signing-the-request). (required)
     * @param  string $clientId Identification of client (end-user). &#x60;clientId&#x60; or &#x60;operationId&#x60; is required. (optional)
     * @param  string $operationId End-user identifier assigned by Finbricks.com. &#x60;clientId&#x60; or &#x60;operationId&#x60; is required. For more information, see chapter [Identifiers](#section/Introduction/Identifiers). (optional)
     *
     * @throws \Finbricks\Api\Info\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of object[]|\Finbricks\Api\Info\Model\Error, HTTP status code, HTTP response headers (array of strings)
     */
    public function accountListWithBalanceGetWithHttpInfo($merchantId, $paymentProvider, $signature, $clientId = null, $operationId = null)
    {
        $request = $this->accountListWithBalanceGetRequest($merchantId, $paymentProvider, $signature, $clientId, $operationId);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('object[]' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, 'object[]', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                default:
                    if ('\Finbricks\Api\Info\Model\Error' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Finbricks\Api\Info\Model\Error', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = 'object[]';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        'object[]',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                default:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Finbricks\Api\Info\Model\Error',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation accountListWithBalanceGetAsync
     *
     * User&#39;s accounts with balances
     *
     * @param  string $merchantId Unique merchant identifier from merchant registration process. (required)
     * @param  string $paymentProvider In case you would like to choose the payer bank on your side (e-shop), fill in the value.  In case you would like to let the end-user select the bank on Zaplaceno.cz front-end, leave it empty.  Enumeration of possible values can be obtained from __/paymentProviders__ endpoint. (required)
     * @param  string $signature Signature of the request. For more information, see chapter [Signing the request](#section/Security/Signing-the-request). (required)
     * @param  string $clientId Identification of client (end-user). &#x60;clientId&#x60; or &#x60;operationId&#x60; is required. (optional)
     * @param  string $operationId End-user identifier assigned by Finbricks.com. &#x60;clientId&#x60; or &#x60;operationId&#x60; is required. For more information, see chapter [Identifiers](#section/Introduction/Identifiers). (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function accountListWithBalanceGetAsync($merchantId, $paymentProvider, $signature, $clientId = null, $operationId = null)
    {
        return $this->accountListWithBalanceGetAsyncWithHttpInfo($merchantId, $paymentProvider, $signature, $clientId, $operationId)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation accountListWithBalanceGetAsyncWithHttpInfo
     *
     * User&#39;s accounts with balances
     *
     * @param  string $merchantId Unique merchant identifier from merchant registration process. (required)
     * @param  string $paymentProvider In case you would like to choose the payer bank on your side (e-shop), fill in the value.  In case you would like to let the end-user select the bank on Zaplaceno.cz front-end, leave it empty.  Enumeration of possible values can be obtained from __/paymentProviders__ endpoint. (required)
     * @param  string $signature Signature of the request. For more information, see chapter [Signing the request](#section/Security/Signing-the-request). (required)
     * @param  string $clientId Identification of client (end-user). &#x60;clientId&#x60; or &#x60;operationId&#x60; is required. (optional)
     * @param  string $operationId End-user identifier assigned by Finbricks.com. &#x60;clientId&#x60; or &#x60;operationId&#x60; is required. For more information, see chapter [Identifiers](#section/Introduction/Identifiers). (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function accountListWithBalanceGetAsyncWithHttpInfo($merchantId, $paymentProvider, $signature, $clientId = null, $operationId = null)
    {
        $returnType = 'object[]';
        $request = $this->accountListWithBalanceGetRequest($merchantId, $paymentProvider, $signature, $clientId, $operationId);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'accountListWithBalanceGet'
     *
     * @param  string $merchantId Unique merchant identifier from merchant registration process. (required)
     * @param  string $paymentProvider In case you would like to choose the payer bank on your side (e-shop), fill in the value.  In case you would like to let the end-user select the bank on Zaplaceno.cz front-end, leave it empty.  Enumeration of possible values can be obtained from __/paymentProviders__ endpoint. (required)
     * @param  string $signature Signature of the request. For more information, see chapter [Signing the request](#section/Security/Signing-the-request). (required)
     * @param  string $clientId Identification of client (end-user). &#x60;clientId&#x60; or &#x60;operationId&#x60; is required. (optional)
     * @param  string $operationId End-user identifier assigned by Finbricks.com. &#x60;clientId&#x60; or &#x60;operationId&#x60; is required. For more information, see chapter [Identifiers](#section/Introduction/Identifiers). (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function accountListWithBalanceGetRequest($merchantId, $paymentProvider, $signature, $clientId = null, $operationId = null)
    {
        // verify the required parameter 'merchantId' is set
        if ($merchantId === null || (is_array($merchantId) && count($merchantId) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $merchantId when calling accountListWithBalanceGet'
            );
        }
        // verify the required parameter 'paymentProvider' is set
        if ($paymentProvider === null || (is_array($paymentProvider) && count($paymentProvider) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $paymentProvider when calling accountListWithBalanceGet'
            );
        }
        // verify the required parameter 'signature' is set
        if ($signature === null || (is_array($signature) && count($signature) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $signature when calling accountListWithBalanceGet'
            );
        }

        $resourcePath = '/account/listWithBalance';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($merchantId !== null) {
            if('form' === 'form' && is_array($merchantId)) {
                foreach($merchantId as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['merchantId'] = $merchantId;
            }
        }
        // query params
        if ($clientId !== null) {
            if('form' === 'form' && is_array($clientId)) {
                foreach($clientId as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['clientId'] = $clientId;
            }
        }
        // query params
        if ($operationId !== null) {
            if('form' === 'form' && is_array($operationId)) {
                foreach($operationId as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['operationId'] = $operationId;
            }
        }
        // query params
        if ($paymentProvider !== null) {
            if('form' === 'form' && is_array($paymentProvider)) {
                foreach($paymentProvider as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['paymentProvider'] = $paymentProvider;
            }
        }

        // header params
        if ($signature !== null) {
            $headerParams['signature'] = ObjectSerializer::toHeaderValue($signature);
        }



        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation accountTransactionsGet
     *
     * User&#39;s account transactions
     *
     * @param  string $merchantId Unique merchant identifier from merchant registration process. (required)
     * @param  string $paymentProvider In case you would like to choose the payer bank on your side (e-shop), fill in the value.  In case you would like to let the end-user select the bank on Zaplaceno.cz front-end, leave it empty.  Enumeration of possible values can be obtained from __/paymentProviders__ endpoint. (required)
     * @param  string $bankAccountId API payment account identifier from the response to a query on the list of accounts. (required)
     * @param  string $signature Signature of the request. For more information, see chapter [Signing the request](#section/Security/Signing-the-request). (required)
     * @param  string $clientId Identification of client (end-user). &#x60;clientId&#x60; or &#x60;operationId&#x60; is required. (optional)
     * @param  string $operationId End-user identifier assigned by Finbricks.com. &#x60;clientId&#x60; or &#x60;operationId&#x60; is required. For more information, see chapter [Identifiers](#section/Introduction/Identifiers). (optional)
     * @param  \DateTime $dateFrom Date of the start of required transaction history. Format yyyy-MM-dd. (optional)
     * @param  \DateTime $dateTo Date of the end of required transaction history [inclusive]. Format yyyy-MM-dd. (optional)
     * @param  string $currency Account currency. CurrencyCode, ISO 4217. (optional)
     * @param  float $size Paging. Number of entries per page. There is a limit 50 per page to the number of records that helps prevent a bank request from timeouting. (optional)
     * @param  float $page Paging. Required page. Default: 0 (optional)
     *
     * @throws \Finbricks\Api\Info\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Finbricks\Api\Info\Model\AccountTransactions|\Finbricks\Api\Info\Model\Error
     */
    public function accountTransactionsGet($merchantId, $paymentProvider, $bankAccountId, $signature, $clientId = null, $operationId = null, $dateFrom = null, $dateTo = null, $currency = null, $size = null, $page = null)
    {
        list($response) = $this->accountTransactionsGetWithHttpInfo($merchantId, $paymentProvider, $bankAccountId, $signature, $clientId, $operationId, $dateFrom, $dateTo, $currency, $size, $page);
        return $response;
    }

    /**
     * Operation accountTransactionsGetWithHttpInfo
     *
     * User&#39;s account transactions
     *
     * @param  string $merchantId Unique merchant identifier from merchant registration process. (required)
     * @param  string $paymentProvider In case you would like to choose the payer bank on your side (e-shop), fill in the value.  In case you would like to let the end-user select the bank on Zaplaceno.cz front-end, leave it empty.  Enumeration of possible values can be obtained from __/paymentProviders__ endpoint. (required)
     * @param  string $bankAccountId API payment account identifier from the response to a query on the list of accounts. (required)
     * @param  string $signature Signature of the request. For more information, see chapter [Signing the request](#section/Security/Signing-the-request). (required)
     * @param  string $clientId Identification of client (end-user). &#x60;clientId&#x60; or &#x60;operationId&#x60; is required. (optional)
     * @param  string $operationId End-user identifier assigned by Finbricks.com. &#x60;clientId&#x60; or &#x60;operationId&#x60; is required. For more information, see chapter [Identifiers](#section/Introduction/Identifiers). (optional)
     * @param  \DateTime $dateFrom Date of the start of required transaction history. Format yyyy-MM-dd. (optional)
     * @param  \DateTime $dateTo Date of the end of required transaction history [inclusive]. Format yyyy-MM-dd. (optional)
     * @param  string $currency Account currency. CurrencyCode, ISO 4217. (optional)
     * @param  float $size Paging. Number of entries per page. There is a limit 50 per page to the number of records that helps prevent a bank request from timeouting. (optional)
     * @param  float $page Paging. Required page. Default: 0 (optional)
     *
     * @throws \Finbricks\Api\Info\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Finbricks\Api\Info\Model\AccountTransactions|\Finbricks\Api\Info\Model\Error, HTTP status code, HTTP response headers (array of strings)
     */
    public function accountTransactionsGetWithHttpInfo($merchantId, $paymentProvider, $bankAccountId, $signature, $clientId = null, $operationId = null, $dateFrom = null, $dateTo = null, $currency = null, $size = null, $page = null)
    {
        $request = $this->accountTransactionsGetRequest($merchantId, $paymentProvider, $bankAccountId, $signature, $clientId, $operationId, $dateFrom, $dateTo, $currency, $size, $page);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\Finbricks\Api\Info\Model\AccountTransactions' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Finbricks\Api\Info\Model\AccountTransactions', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                default:
                    if ('\Finbricks\Api\Info\Model\Error' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Finbricks\Api\Info\Model\Error', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\Finbricks\Api\Info\Model\AccountTransactions';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Finbricks\Api\Info\Model\AccountTransactions',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                default:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Finbricks\Api\Info\Model\Error',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation accountTransactionsGetAsync
     *
     * User&#39;s account transactions
     *
     * @param  string $merchantId Unique merchant identifier from merchant registration process. (required)
     * @param  string $paymentProvider In case you would like to choose the payer bank on your side (e-shop), fill in the value.  In case you would like to let the end-user select the bank on Zaplaceno.cz front-end, leave it empty.  Enumeration of possible values can be obtained from __/paymentProviders__ endpoint. (required)
     * @param  string $bankAccountId API payment account identifier from the response to a query on the list of accounts. (required)
     * @param  string $signature Signature of the request. For more information, see chapter [Signing the request](#section/Security/Signing-the-request). (required)
     * @param  string $clientId Identification of client (end-user). &#x60;clientId&#x60; or &#x60;operationId&#x60; is required. (optional)
     * @param  string $operationId End-user identifier assigned by Finbricks.com. &#x60;clientId&#x60; or &#x60;operationId&#x60; is required. For more information, see chapter [Identifiers](#section/Introduction/Identifiers). (optional)
     * @param  \DateTime $dateFrom Date of the start of required transaction history. Format yyyy-MM-dd. (optional)
     * @param  \DateTime $dateTo Date of the end of required transaction history [inclusive]. Format yyyy-MM-dd. (optional)
     * @param  string $currency Account currency. CurrencyCode, ISO 4217. (optional)
     * @param  float $size Paging. Number of entries per page. There is a limit 50 per page to the number of records that helps prevent a bank request from timeouting. (optional)
     * @param  float $page Paging. Required page. Default: 0 (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function accountTransactionsGetAsync($merchantId, $paymentProvider, $bankAccountId, $signature, $clientId = null, $operationId = null, $dateFrom = null, $dateTo = null, $currency = null, $size = null, $page = null)
    {
        return $this->accountTransactionsGetAsyncWithHttpInfo($merchantId, $paymentProvider, $bankAccountId, $signature, $clientId, $operationId, $dateFrom, $dateTo, $currency, $size, $page)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation accountTransactionsGetAsyncWithHttpInfo
     *
     * User&#39;s account transactions
     *
     * @param  string $merchantId Unique merchant identifier from merchant registration process. (required)
     * @param  string $paymentProvider In case you would like to choose the payer bank on your side (e-shop), fill in the value.  In case you would like to let the end-user select the bank on Zaplaceno.cz front-end, leave it empty.  Enumeration of possible values can be obtained from __/paymentProviders__ endpoint. (required)
     * @param  string $bankAccountId API payment account identifier from the response to a query on the list of accounts. (required)
     * @param  string $signature Signature of the request. For more information, see chapter [Signing the request](#section/Security/Signing-the-request). (required)
     * @param  string $clientId Identification of client (end-user). &#x60;clientId&#x60; or &#x60;operationId&#x60; is required. (optional)
     * @param  string $operationId End-user identifier assigned by Finbricks.com. &#x60;clientId&#x60; or &#x60;operationId&#x60; is required. For more information, see chapter [Identifiers](#section/Introduction/Identifiers). (optional)
     * @param  \DateTime $dateFrom Date of the start of required transaction history. Format yyyy-MM-dd. (optional)
     * @param  \DateTime $dateTo Date of the end of required transaction history [inclusive]. Format yyyy-MM-dd. (optional)
     * @param  string $currency Account currency. CurrencyCode, ISO 4217. (optional)
     * @param  float $size Paging. Number of entries per page. There is a limit 50 per page to the number of records that helps prevent a bank request from timeouting. (optional)
     * @param  float $page Paging. Required page. Default: 0 (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function accountTransactionsGetAsyncWithHttpInfo($merchantId, $paymentProvider, $bankAccountId, $signature, $clientId = null, $operationId = null, $dateFrom = null, $dateTo = null, $currency = null, $size = null, $page = null)
    {
        $returnType = '\Finbricks\Api\Info\Model\AccountTransactions';
        $request = $this->accountTransactionsGetRequest($merchantId, $paymentProvider, $bankAccountId, $signature, $clientId, $operationId, $dateFrom, $dateTo, $currency, $size, $page);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'accountTransactionsGet'
     *
     * @param  string $merchantId Unique merchant identifier from merchant registration process. (required)
     * @param  string $paymentProvider In case you would like to choose the payer bank on your side (e-shop), fill in the value.  In case you would like to let the end-user select the bank on Zaplaceno.cz front-end, leave it empty.  Enumeration of possible values can be obtained from __/paymentProviders__ endpoint. (required)
     * @param  string $bankAccountId API payment account identifier from the response to a query on the list of accounts. (required)
     * @param  string $signature Signature of the request. For more information, see chapter [Signing the request](#section/Security/Signing-the-request). (required)
     * @param  string $clientId Identification of client (end-user). &#x60;clientId&#x60; or &#x60;operationId&#x60; is required. (optional)
     * @param  string $operationId End-user identifier assigned by Finbricks.com. &#x60;clientId&#x60; or &#x60;operationId&#x60; is required. For more information, see chapter [Identifiers](#section/Introduction/Identifiers). (optional)
     * @param  \DateTime $dateFrom Date of the start of required transaction history. Format yyyy-MM-dd. (optional)
     * @param  \DateTime $dateTo Date of the end of required transaction history [inclusive]. Format yyyy-MM-dd. (optional)
     * @param  string $currency Account currency. CurrencyCode, ISO 4217. (optional)
     * @param  float $size Paging. Number of entries per page. There is a limit 50 per page to the number of records that helps prevent a bank request from timeouting. (optional)
     * @param  float $page Paging. Required page. Default: 0 (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function accountTransactionsGetRequest($merchantId, $paymentProvider, $bankAccountId, $signature, $clientId = null, $operationId = null, $dateFrom = null, $dateTo = null, $currency = null, $size = null, $page = null)
    {
        // verify the required parameter 'merchantId' is set
        if ($merchantId === null || (is_array($merchantId) && count($merchantId) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $merchantId when calling accountTransactionsGet'
            );
        }
        // verify the required parameter 'paymentProvider' is set
        if ($paymentProvider === null || (is_array($paymentProvider) && count($paymentProvider) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $paymentProvider when calling accountTransactionsGet'
            );
        }
        // verify the required parameter 'bankAccountId' is set
        if ($bankAccountId === null || (is_array($bankAccountId) && count($bankAccountId) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $bankAccountId when calling accountTransactionsGet'
            );
        }
        // verify the required parameter 'signature' is set
        if ($signature === null || (is_array($signature) && count($signature) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $signature when calling accountTransactionsGet'
            );
        }

        $resourcePath = '/account/transactions';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($merchantId !== null) {
            if('form' === 'form' && is_array($merchantId)) {
                foreach($merchantId as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['merchantId'] = $merchantId;
            }
        }
        // query params
        if ($clientId !== null) {
            if('form' === 'form' && is_array($clientId)) {
                foreach($clientId as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['clientId'] = $clientId;
            }
        }
        // query params
        if ($operationId !== null) {
            if('form' === 'form' && is_array($operationId)) {
                foreach($operationId as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['operationId'] = $operationId;
            }
        }
        // query params
        if ($paymentProvider !== null) {
            if('form' === 'form' && is_array($paymentProvider)) {
                foreach($paymentProvider as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['paymentProvider'] = $paymentProvider;
            }
        }
        // query params
        if ($bankAccountId !== null) {
            if('form' === 'form' && is_array($bankAccountId)) {
                foreach($bankAccountId as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['bankAccountId'] = $bankAccountId;
            }
        }
        // query params
        if ($dateFrom !== null) {
            if('form' === 'form' && is_array($dateFrom)) {
                foreach($dateFrom as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['dateFrom'] = $dateFrom;
            }
        }
        // query params
        if ($dateTo !== null) {
            if('form' === 'form' && is_array($dateTo)) {
                foreach($dateTo as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['dateTo'] = $dateTo;
            }
        }
        // query params
        if ($currency !== null) {
            if('form' === 'form' && is_array($currency)) {
                foreach($currency as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['currency'] = $currency;
            }
        }
        // query params
        if ($size !== null) {
            if('form' === 'form' && is_array($size)) {
                foreach($size as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['size'] = $size;
            }
        }
        // query params
        if ($page !== null) {
            if('form' === 'form' && is_array($page)) {
                foreach($page as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['page'] = $page;
            }
        }

        // header params
        if ($signature !== null) {
            $headerParams['signature'] = ObjectSerializer::toHeaderValue($signature);
        }



        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Create http client option
     *
     * @throws \RuntimeException on file opening failure
     * @return array of http client options
     */
    protected function createHttpClientOption()
    {
        $options = [];
        if ($this->config->getDebug()) {
            $options[RequestOptions::DEBUG] = fopen($this->config->getDebugFile(), 'a');
            if (!$options[RequestOptions::DEBUG]) {
                throw new \RuntimeException('Failed to open the debug file: ' . $this->config->getDebugFile());
            }
        }

        return $options;
    }
}
