<?php
/**
 * PlatformTransactionApi
 * PHP version 7.2
 *
 * @category Class
 * @package  Finbricks\Api\Platform
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Finbricks.com API - Payment processing
 *
 * Finbricks.com API - Payment processing
 *
 * The version of the OpenAPI document: 1.3.0
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 5.1.1
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace Finbricks\Api\Platform\Api;

use GuzzleHttp\Client;
use GuzzleHttp\ClientInterface;
use GuzzleHttp\Exception\RequestException;
use GuzzleHttp\Psr7\MultipartStream;
use GuzzleHttp\Psr7\Request;
use GuzzleHttp\RequestOptions;
use Finbricks\Api\Platform\ApiException;
use Finbricks\Api\Platform\Configuration;
use Finbricks\Api\Platform\HeaderSelector;
use Finbricks\Api\Platform\ObjectSerializer;

/**
 * PlatformTransactionApi Class Doc Comment
 *
 * @category Class
 * @package  Finbricks\Api\Platform
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */
class PlatformTransactionApi
{
    /**
     * @var ClientInterface
     */
    protected $client;

    /**
     * @var Configuration
     */
    protected $config;

    /**
     * @var HeaderSelector
     */
    protected $headerSelector;

    /**
     * @var int Host index
     */
    protected $hostIndex;

    /**
     * @param ClientInterface $client
     * @param Configuration   $config
     * @param HeaderSelector  $selector
     * @param int             $hostIndex (Optional) host index to select the list of hosts if defined in the OpenAPI spec
     */
    public function __construct(
        ClientInterface $client = null,
        Configuration $config = null,
        HeaderSelector $selector = null,
        $hostIndex = 0
    ) {
        $this->client = $client ?: new Client();
        $this->config = $config ?: new Configuration();
        $this->headerSelector = $selector ?: new HeaderSelector();
        $this->hostIndex = $hostIndex;
    }

    /**
     * Set the host index
     *
     * @param int $hostIndex Host index (required)
     */
    public function setHostIndex($hostIndex): void
    {
        $this->hostIndex = $hostIndex;
    }

    /**
     * Get the host index
     *
     * @return int Host index
     */
    public function getHostIndex()
    {
        return $this->hostIndex;
    }

    /**
     * @return Configuration
     */
    public function getConfig()
    {
        return $this->config;
    }

    /**
     * Operation transactionPlatformInitPost
     *
     * Transaction initialization
     *
     * @param  string $signature Signature of the request. For more information, see chapter [Signing the request](#section/Security/Signing-the-request). (required)
     * @param  \Finbricks\Api\Platform\Model\TransactionInitDTO $transactionInitDTO transactionInitDTO (required)
     *
     * @throws \Finbricks\Api\Platform\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Finbricks\Api\Platform\Model\TransactionInitResultDTO|\Finbricks\Api\Platform\Model\Error
     */
    public function transactionPlatformInitPost($signature, $transactionInitDTO)
    {
        list($response) = $this->transactionPlatformInitPostWithHttpInfo($signature, $transactionInitDTO);
        return $response;
    }

    /**
     * Operation transactionPlatformInitPostWithHttpInfo
     *
     * Transaction initialization
     *
     * @param  string $signature Signature of the request. For more information, see chapter [Signing the request](#section/Security/Signing-the-request). (required)
     * @param  \Finbricks\Api\Platform\Model\TransactionInitDTO $transactionInitDTO (required)
     *
     * @throws \Finbricks\Api\Platform\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Finbricks\Api\Platform\Model\TransactionInitResultDTO|\Finbricks\Api\Platform\Model\Error, HTTP status code, HTTP response headers (array of strings)
     */
    public function transactionPlatformInitPostWithHttpInfo($signature, $transactionInitDTO)
    {
        $request = $this->transactionPlatformInitPostRequest($signature, $transactionInitDTO);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 201:
                    if ('\Finbricks\Api\Platform\Model\TransactionInitResultDTO' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Finbricks\Api\Platform\Model\TransactionInitResultDTO', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                default:
                    if ('\Finbricks\Api\Platform\Model\Error' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Finbricks\Api\Platform\Model\Error', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\Finbricks\Api\Platform\Model\TransactionInitResultDTO';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 201:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Finbricks\Api\Platform\Model\TransactionInitResultDTO',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                default:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Finbricks\Api\Platform\Model\Error',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation transactionPlatformInitPostAsync
     *
     * Transaction initialization
     *
     * @param  string $signature Signature of the request. For more information, see chapter [Signing the request](#section/Security/Signing-the-request). (required)
     * @param  \Finbricks\Api\Platform\Model\TransactionInitDTO $transactionInitDTO (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function transactionPlatformInitPostAsync($signature, $transactionInitDTO)
    {
        return $this->transactionPlatformInitPostAsyncWithHttpInfo($signature, $transactionInitDTO)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation transactionPlatformInitPostAsyncWithHttpInfo
     *
     * Transaction initialization
     *
     * @param  string $signature Signature of the request. For more information, see chapter [Signing the request](#section/Security/Signing-the-request). (required)
     * @param  \Finbricks\Api\Platform\Model\TransactionInitDTO $transactionInitDTO (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function transactionPlatformInitPostAsyncWithHttpInfo($signature, $transactionInitDTO)
    {
        $returnType = '\Finbricks\Api\Platform\Model\TransactionInitResultDTO';
        $request = $this->transactionPlatformInitPostRequest($signature, $transactionInitDTO);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'transactionPlatformInitPost'
     *
     * @param  string $signature Signature of the request. For more information, see chapter [Signing the request](#section/Security/Signing-the-request). (required)
     * @param  \Finbricks\Api\Platform\Model\TransactionInitDTO $transactionInitDTO (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function transactionPlatformInitPostRequest($signature, $transactionInitDTO)
    {
        // verify the required parameter 'signature' is set
        if ($signature === null || (is_array($signature) && count($signature) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $signature when calling transactionPlatformInitPost'
            );
        }
        // verify the required parameter 'transactionInitDTO' is set
        if ($transactionInitDTO === null || (is_array($transactionInitDTO) && count($transactionInitDTO) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $transactionInitDTO when calling transactionPlatformInitPost'
            );
        }

        $resourcePath = '/transaction/platform/init';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // header params
        if ($signature !== null) {
            $headerParams['signature'] = ObjectSerializer::toHeaderValue($signature);
        }



        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($transactionInitDTO)) {
            if ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($transactionInitDTO));
            } else {
                $httpBody = $transactionInitDTO;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation transactionPlatformStatusGet
     *
     * Transaction status
     *
     * @param  string $merchantId Unique merchant identifier from merchant registration process (required)
     * @param  string $merchantTransactionId Unique transaction identifier generated by merchant (required)
     * @param  string $signature Signature of the request. For more information, see chapter [Signing the request](#section/Security/Signing-the-request). (required)
     *
     * @throws \Finbricks\Api\Platform\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Finbricks\Api\Platform\Model\TransactionStatusResultDTO|\Finbricks\Api\Platform\Model\Error
     */
    public function transactionPlatformStatusGet($merchantId, $merchantTransactionId, $signature)
    {
        list($response) = $this->transactionPlatformStatusGetWithHttpInfo($merchantId, $merchantTransactionId, $signature);
        return $response;
    }

    /**
     * Operation transactionPlatformStatusGetWithHttpInfo
     *
     * Transaction status
     *
     * @param  string $merchantId Unique merchant identifier from merchant registration process (required)
     * @param  string $merchantTransactionId Unique transaction identifier generated by merchant (required)
     * @param  string $signature Signature of the request. For more information, see chapter [Signing the request](#section/Security/Signing-the-request). (required)
     *
     * @throws \Finbricks\Api\Platform\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Finbricks\Api\Platform\Model\TransactionStatusResultDTO|\Finbricks\Api\Platform\Model\Error, HTTP status code, HTTP response headers (array of strings)
     */
    public function transactionPlatformStatusGetWithHttpInfo($merchantId, $merchantTransactionId, $signature)
    {
        $request = $this->transactionPlatformStatusGetRequest($merchantId, $merchantTransactionId, $signature);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\Finbricks\Api\Platform\Model\TransactionStatusResultDTO' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Finbricks\Api\Platform\Model\TransactionStatusResultDTO', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                default:
                    if ('\Finbricks\Api\Platform\Model\Error' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Finbricks\Api\Platform\Model\Error', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\Finbricks\Api\Platform\Model\TransactionStatusResultDTO';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Finbricks\Api\Platform\Model\TransactionStatusResultDTO',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                default:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Finbricks\Api\Platform\Model\Error',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation transactionPlatformStatusGetAsync
     *
     * Transaction status
     *
     * @param  string $merchantId Unique merchant identifier from merchant registration process (required)
     * @param  string $merchantTransactionId Unique transaction identifier generated by merchant (required)
     * @param  string $signature Signature of the request. For more information, see chapter [Signing the request](#section/Security/Signing-the-request). (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function transactionPlatformStatusGetAsync($merchantId, $merchantTransactionId, $signature)
    {
        return $this->transactionPlatformStatusGetAsyncWithHttpInfo($merchantId, $merchantTransactionId, $signature)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation transactionPlatformStatusGetAsyncWithHttpInfo
     *
     * Transaction status
     *
     * @param  string $merchantId Unique merchant identifier from merchant registration process (required)
     * @param  string $merchantTransactionId Unique transaction identifier generated by merchant (required)
     * @param  string $signature Signature of the request. For more information, see chapter [Signing the request](#section/Security/Signing-the-request). (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function transactionPlatformStatusGetAsyncWithHttpInfo($merchantId, $merchantTransactionId, $signature)
    {
        $returnType = '\Finbricks\Api\Platform\Model\TransactionStatusResultDTO';
        $request = $this->transactionPlatformStatusGetRequest($merchantId, $merchantTransactionId, $signature);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'transactionPlatformStatusGet'
     *
     * @param  string $merchantId Unique merchant identifier from merchant registration process (required)
     * @param  string $merchantTransactionId Unique transaction identifier generated by merchant (required)
     * @param  string $signature Signature of the request. For more information, see chapter [Signing the request](#section/Security/Signing-the-request). (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function transactionPlatformStatusGetRequest($merchantId, $merchantTransactionId, $signature)
    {
        // verify the required parameter 'merchantId' is set
        if ($merchantId === null || (is_array($merchantId) && count($merchantId) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $merchantId when calling transactionPlatformStatusGet'
            );
        }
        // verify the required parameter 'merchantTransactionId' is set
        if ($merchantTransactionId === null || (is_array($merchantTransactionId) && count($merchantTransactionId) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $merchantTransactionId when calling transactionPlatformStatusGet'
            );
        }
        // verify the required parameter 'signature' is set
        if ($signature === null || (is_array($signature) && count($signature) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $signature when calling transactionPlatformStatusGet'
            );
        }

        $resourcePath = '/transaction/platform/status';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($merchantId !== null) {
            if('form' === 'form' && is_array($merchantId)) {
                foreach($merchantId as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['merchantId'] = $merchantId;
            }
        }
        // query params
        if ($merchantTransactionId !== null) {
            if('form' === 'form' && is_array($merchantTransactionId)) {
                foreach($merchantTransactionId as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['merchantTransactionId'] = $merchantTransactionId;
            }
        }

        // header params
        if ($signature !== null) {
            $headerParams['signature'] = ObjectSerializer::toHeaderValue($signature);
        }



        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Create http client option
     *
     * @throws \RuntimeException on file opening failure
     * @return array of http client options
     */
    protected function createHttpClientOption()
    {
        $options = [];
        if ($this->config->getDebug()) {
            $options[RequestOptions::DEBUG] = fopen($this->config->getDebugFile(), 'a');
            if (!$options[RequestOptions::DEBUG]) {
                throw new \RuntimeException('Failed to open the debug file: ' . $this->config->getDebugFile());
            }
        }

        return $options;
    }
}
