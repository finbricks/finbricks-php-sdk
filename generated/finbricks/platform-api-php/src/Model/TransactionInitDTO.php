<?php
/**
 * TransactionInitDTO
 *
 * PHP version 7.2
 *
 * @category Class
 * @package  Finbricks\Api\Platform
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Finbricks.com API - Payment processing
 *
 * Finbricks.com API - Payment processing
 *
 * The version of the OpenAPI document: 1.3.0
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 5.1.1
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace Finbricks\Api\Platform\Model;

use \ArrayAccess;
use \Finbricks\Api\Platform\ObjectSerializer;

/**
 * TransactionInitDTO Class Doc Comment
 *
 * @category Class
 * @description Transaction init object
 * @package  Finbricks\Api\Platform
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<TKey, TValue>
 * @template TKey int|null
 * @template TValue mixed|null
 */
class TransactionInitDTO implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'TransactionInitDTO';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'merchantId' => 'string',
        'merchantTransactionId' => 'string',
        'totalPrice' => 'float',
        'debtorAccountIban' => 'string',
        'creditorAccountIban' => 'string',
        'description' => 'string',
        'variableSymbol' => 'string',
        'specificSymbol' => 'string',
        'constantSymbol' => 'string',
        'callbackUrl' => 'string',
        'clientId' => 'string',
        'instructionPriority' => 'string',
        'initiatorName' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'merchantId' => 'uuid',
        'merchantTransactionId' => 'uuid',
        'totalPrice' => null,
        'debtorAccountIban' => null,
        'creditorAccountIban' => null,
        'description' => null,
        'variableSymbol' => null,
        'specificSymbol' => null,
        'constantSymbol' => null,
        'callbackUrl' => null,
        'clientId' => null,
        'instructionPriority' => null,
        'initiatorName' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'merchantId' => 'merchantId',
        'merchantTransactionId' => 'merchantTransactionId',
        'totalPrice' => 'totalPrice',
        'debtorAccountIban' => 'debtorAccountIban',
        'creditorAccountIban' => 'creditorAccountIban',
        'description' => 'description',
        'variableSymbol' => 'variableSymbol',
        'specificSymbol' => 'specificSymbol',
        'constantSymbol' => 'constantSymbol',
        'callbackUrl' => 'callbackUrl',
        'clientId' => 'clientId',
        'instructionPriority' => 'instructionPriority',
        'initiatorName' => 'initiatorName'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'merchantId' => 'setMerchantId',
        'merchantTransactionId' => 'setMerchantTransactionId',
        'totalPrice' => 'setTotalPrice',
        'debtorAccountIban' => 'setDebtorAccountIban',
        'creditorAccountIban' => 'setCreditorAccountIban',
        'description' => 'setDescription',
        'variableSymbol' => 'setVariableSymbol',
        'specificSymbol' => 'setSpecificSymbol',
        'constantSymbol' => 'setConstantSymbol',
        'callbackUrl' => 'setCallbackUrl',
        'clientId' => 'setClientId',
        'instructionPriority' => 'setInstructionPriority',
        'initiatorName' => 'setInitiatorName'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'merchantId' => 'getMerchantId',
        'merchantTransactionId' => 'getMerchantTransactionId',
        'totalPrice' => 'getTotalPrice',
        'debtorAccountIban' => 'getDebtorAccountIban',
        'creditorAccountIban' => 'getCreditorAccountIban',
        'description' => 'getDescription',
        'variableSymbol' => 'getVariableSymbol',
        'specificSymbol' => 'getSpecificSymbol',
        'constantSymbol' => 'getConstantSymbol',
        'callbackUrl' => 'getCallbackUrl',
        'clientId' => 'getClientId',
        'instructionPriority' => 'getInstructionPriority',
        'initiatorName' => 'getInitiatorName'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }

    const INSTRUCTION_PRIORITY_NORM = 'NORM';
    const INSTRUCTION_PRIORITY_INST = 'INST';

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getInstructionPriorityAllowableValues()
    {
        return [
            self::INSTRUCTION_PRIORITY_NORM,
            self::INSTRUCTION_PRIORITY_INST,
        ];
    }

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['merchantId'] = $data['merchantId'] ?? null;
        $this->container['merchantTransactionId'] = $data['merchantTransactionId'] ?? null;
        $this->container['totalPrice'] = $data['totalPrice'] ?? null;
        $this->container['debtorAccountIban'] = $data['debtorAccountIban'] ?? null;
        $this->container['creditorAccountIban'] = $data['creditorAccountIban'] ?? null;
        $this->container['description'] = $data['description'] ?? null;
        $this->container['variableSymbol'] = $data['variableSymbol'] ?? null;
        $this->container['specificSymbol'] = $data['specificSymbol'] ?? null;
        $this->container['constantSymbol'] = $data['constantSymbol'] ?? null;
        $this->container['callbackUrl'] = $data['callbackUrl'] ?? null;
        $this->container['clientId'] = $data['clientId'] ?? null;
        $this->container['instructionPriority'] = $data['instructionPriority'] ?? null;
        $this->container['initiatorName'] = $data['initiatorName'] ?? null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['merchantId'] === null) {
            $invalidProperties[] = "'merchantId' can't be null";
        }
        if ($this->container['merchantTransactionId'] === null) {
            $invalidProperties[] = "'merchantTransactionId' can't be null";
        }
        if ($this->container['totalPrice'] === null) {
            $invalidProperties[] = "'totalPrice' can't be null";
        }
        if ($this->container['debtorAccountIban'] === null) {
            $invalidProperties[] = "'debtorAccountIban' can't be null";
        }
        if ($this->container['creditorAccountIban'] === null) {
            $invalidProperties[] = "'creditorAccountIban' can't be null";
        }
        if (!is_null($this->container['description']) && (mb_strlen($this->container['description']) > 140)) {
            $invalidProperties[] = "invalid value for 'description', the character length must be smaller than or equal to 140.";
        }

        if (!is_null($this->container['variableSymbol']) && (mb_strlen($this->container['variableSymbol']) > 10)) {
            $invalidProperties[] = "invalid value for 'variableSymbol', the character length must be smaller than or equal to 10.";
        }

        if (!is_null($this->container['specificSymbol']) && (mb_strlen($this->container['specificSymbol']) > 10)) {
            $invalidProperties[] = "invalid value for 'specificSymbol', the character length must be smaller than or equal to 10.";
        }

        if (!is_null($this->container['constantSymbol']) && (mb_strlen($this->container['constantSymbol']) > 10)) {
            $invalidProperties[] = "invalid value for 'constantSymbol', the character length must be smaller than or equal to 10.";
        }

        if (!is_null($this->container['clientId']) && (mb_strlen($this->container['clientId']) > 100)) {
            $invalidProperties[] = "invalid value for 'clientId', the character length must be smaller than or equal to 100.";
        }

        $allowedValues = $this->getInstructionPriorityAllowableValues();
        if (!is_null($this->container['instructionPriority']) && !in_array($this->container['instructionPriority'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'instructionPriority', must be one of '%s'",
                $this->container['instructionPriority'],
                implode("', '", $allowedValues)
            );
        }

        if (!is_null($this->container['initiatorName']) && (mb_strlen($this->container['initiatorName']) > 50)) {
            $invalidProperties[] = "invalid value for 'initiatorName', the character length must be smaller than or equal to 50.";
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets merchantId
     *
     * @return string
     */
    public function getMerchantId()
    {
        return $this->container['merchantId'];
    }

    /**
     * Sets merchantId
     *
     * @param string $merchantId Unique merchant identifier from merchant registration process
     *
     * @return self
     */
    public function setMerchantId($merchantId)
    {
        $this->container['merchantId'] = $merchantId;

        return $this;
    }

    /**
     * Gets merchantTransactionId
     *
     * @return string
     */
    public function getMerchantTransactionId()
    {
        return $this->container['merchantTransactionId'];
    }

    /**
     * Sets merchantTransactionId
     *
     * @param string $merchantTransactionId Unique transaction identifier generated by merchant
     *
     * @return self
     */
    public function setMerchantTransactionId($merchantTransactionId)
    {
        $this->container['merchantTransactionId'] = $merchantTransactionId;

        return $this;
    }

    /**
     * Gets totalPrice
     *
     * @return float
     */
    public function getTotalPrice()
    {
        return $this->container['totalPrice'];
    }

    /**
     * Sets totalPrice
     *
     * @param float $totalPrice Transaction amount
     *
     * @return self
     */
    public function setTotalPrice($totalPrice)
    {
        $this->container['totalPrice'] = $totalPrice;

        return $this;
    }

    /**
     * Gets debtorAccountIban
     *
     * @return string
     */
    public function getDebtorAccountIban()
    {
        return $this->container['debtorAccountIban'];
    }

    /**
     * Sets debtorAccountIban
     *
     * @param string $debtorAccountIban Debtor's account number in IBAN format
     *
     * @return self
     */
    public function setDebtorAccountIban($debtorAccountIban)
    {
        $this->container['debtorAccountIban'] = $debtorAccountIban;

        return $this;
    }

    /**
     * Gets creditorAccountIban
     *
     * @return string
     */
    public function getCreditorAccountIban()
    {
        return $this->container['creditorAccountIban'];
    }

    /**
     * Sets creditorAccountIban
     *
     * @param string $creditorAccountIban Creditor's account number in IBAN format
     *
     * @return self
     */
    public function setCreditorAccountIban($creditorAccountIban)
    {
        $this->container['creditorAccountIban'] = $creditorAccountIban;

        return $this;
    }

    /**
     * Gets description
     *
     * @return string|null
     */
    public function getDescription()
    {
        return $this->container['description'];
    }

    /**
     * Sets description
     *
     * @param string|null $description Payment description - message for the payee
     *
     * @return self
     */
    public function setDescription($description)
    {
        if (!is_null($description) && (mb_strlen($description) > 140)) {
            throw new \InvalidArgumentException('invalid length for $description when calling TransactionInitDTO., must be smaller than or equal to 140.');
        }

        $this->container['description'] = $description;

        return $this;
    }

    /**
     * Gets variableSymbol
     *
     * @return string|null
     */
    public function getVariableSymbol()
    {
        return $this->container['variableSymbol'];
    }

    /**
     * Sets variableSymbol
     *
     * @param string|null $variableSymbol Variable symbol. Some banks may trim '0's at the beginning.
     *
     * @return self
     */
    public function setVariableSymbol($variableSymbol)
    {
        if (!is_null($variableSymbol) && (mb_strlen($variableSymbol) > 10)) {
            throw new \InvalidArgumentException('invalid length for $variableSymbol when calling TransactionInitDTO., must be smaller than or equal to 10.');
        }

        $this->container['variableSymbol'] = $variableSymbol;

        return $this;
    }

    /**
     * Gets specificSymbol
     *
     * @return string|null
     */
    public function getSpecificSymbol()
    {
        return $this->container['specificSymbol'];
    }

    /**
     * Sets specificSymbol
     *
     * @param string|null $specificSymbol Specific symbol. Some banks may trim '0's at the beginning.
     *
     * @return self
     */
    public function setSpecificSymbol($specificSymbol)
    {
        if (!is_null($specificSymbol) && (mb_strlen($specificSymbol) > 10)) {
            throw new \InvalidArgumentException('invalid length for $specificSymbol when calling TransactionInitDTO., must be smaller than or equal to 10.');
        }

        $this->container['specificSymbol'] = $specificSymbol;

        return $this;
    }

    /**
     * Gets constantSymbol
     *
     * @return string|null
     */
    public function getConstantSymbol()
    {
        return $this->container['constantSymbol'];
    }

    /**
     * Sets constantSymbol
     *
     * @param string|null $constantSymbol Constant symbol. Some banks may trim '0's at the beginning.
     *
     * @return self
     */
    public function setConstantSymbol($constantSymbol)
    {
        if (!is_null($constantSymbol) && (mb_strlen($constantSymbol) > 10)) {
            throw new \InvalidArgumentException('invalid length for $constantSymbol when calling TransactionInitDTO., must be smaller than or equal to 10.');
        }

        $this->container['constantSymbol'] = $constantSymbol;

        return $this;
    }

    /**
     * Gets callbackUrl
     *
     * @return string|null
     */
    public function getCallbackUrl()
    {
        return $this->container['callbackUrl'];
    }

    /**
     * Sets callbackUrl
     *
     * @param string|null $callbackUrl URL that is called after process of payment is done. It is the place where the client should land after the payment.
     *
     * @return self
     */
    public function setCallbackUrl($callbackUrl)
    {
        $this->container['callbackUrl'] = $callbackUrl;

        return $this;
    }

    /**
     * Gets clientId
     *
     * @return string|null
     */
    public function getClientId()
    {
        return $this->container['clientId'];
    }

    /**
     * Sets clientId
     *
     * @param string|null $clientId Identification of a client (end-user). If the client has been authenticated before and his authentication in the bank is still valid, the step of user authentication will be skipped. Otherwise standard authentication will be required.
     *
     * @return self
     */
    public function setClientId($clientId)
    {
        if (!is_null($clientId) && (mb_strlen($clientId) > 100)) {
            throw new \InvalidArgumentException('invalid length for $clientId when calling TransactionInitDTO., must be smaller than or equal to 100.');
        }

        $this->container['clientId'] = $clientId;

        return $this;
    }

    /**
     * Gets instructionPriority
     *
     * @return string|null
     */
    public function getInstructionPriority()
    {
        return $this->container['instructionPriority'];
    }

    /**
     * Sets instructionPriority
     *
     * @param string|null $instructionPriority If the \"NORM\" is specified, they will make the payment by default.  If the \"INST\" value is stated, the payer's provider executes the payment as Instant according to the applicable rule.  The deadlines for making standard and priority payments may vary depending on the type of payment and are governed by the terms of each payer's conditions.
     *
     * @return self
     */
    public function setInstructionPriority($instructionPriority)
    {
        $allowedValues = $this->getInstructionPriorityAllowableValues();
        if (!is_null($instructionPriority) && !in_array($instructionPriority, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'instructionPriority', must be one of '%s'",
                    $instructionPriority,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['instructionPriority'] = $instructionPriority;

        return $this;
    }

    /**
     * Gets initiatorName
     *
     * @return string|null
     */
    public function getInitiatorName()
    {
        return $this->container['initiatorName'];
    }

    /**
     * Sets initiatorName
     *
     * @param string|null $initiatorName Name of the initiator of the payment. The initiator is a party using your services.
     *
     * @return self
     */
    public function setInitiatorName($initiatorName)
    {
        if (!is_null($initiatorName) && (mb_strlen($initiatorName) > 50)) {
            throw new \InvalidArgumentException('invalid length for $initiatorName when calling TransactionInitDTO., must be smaller than or equal to 50.');
        }

        $this->container['initiatorName'] = $initiatorName;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


