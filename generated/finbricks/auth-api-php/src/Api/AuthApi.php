<?php
/**
 * AuthApi
 * PHP version 7.2
 *
 * @category Class
 * @package  Finbricks\Api\Auth
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Finbricks.com API - User authentication services
 *
 * Finbricks.com API - User authentication services
 *
 * The version of the OpenAPI document: 1.2.5
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 5.1.1
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace Finbricks\Api\Auth\Api;

use GuzzleHttp\Client;
use GuzzleHttp\ClientInterface;
use GuzzleHttp\Exception\RequestException;
use GuzzleHttp\Psr7\MultipartStream;
use GuzzleHttp\Psr7\Request;
use GuzzleHttp\RequestOptions;
use Finbricks\Api\Auth\ApiException;
use Finbricks\Api\Auth\Configuration;
use Finbricks\Api\Auth\HeaderSelector;
use Finbricks\Api\Auth\ObjectSerializer;

/**
 * AuthApi Class Doc Comment
 *
 * @category Class
 * @package  Finbricks\Api\Auth
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */
class AuthApi
{
    /**
     * @var ClientInterface
     */
    protected $client;

    /**
     * @var Configuration
     */
    protected $config;

    /**
     * @var HeaderSelector
     */
    protected $headerSelector;

    /**
     * @var int Host index
     */
    protected $hostIndex;

    /**
     * @param ClientInterface $client
     * @param Configuration   $config
     * @param HeaderSelector  $selector
     * @param int             $hostIndex (Optional) host index to select the list of hosts if defined in the OpenAPI spec
     */
    public function __construct(
        ClientInterface $client = null,
        Configuration $config = null,
        HeaderSelector $selector = null,
        $hostIndex = 0
    ) {
        $this->client = $client ?: new Client();
        $this->config = $config ?: new Configuration();
        $this->headerSelector = $selector ?: new HeaderSelector();
        $this->hostIndex = $hostIndex;
    }

    /**
     * Set the host index
     *
     * @param int $hostIndex Host index (required)
     */
    public function setHostIndex($hostIndex): void
    {
        $this->hostIndex = $hostIndex;
    }

    /**
     * Get the host index
     *
     * @return int Host index
     */
    public function getHostIndex()
    {
        return $this->hostIndex;
    }

    /**
     * @return Configuration
     */
    public function getConfig()
    {
        return $this->config;
    }

    /**
     * Operation authAuthenticatePost
     *
     * Authenticate user
     *
     * @param  string $signature Signature of the request. For more information, see chapter [Signing the request](#section/Security/Signing-the-request). (required)
     * @param  \Finbricks\Api\Auth\Model\AuthenticateRequest $authenticateRequest authenticateRequest (required)
     *
     * @throws \Finbricks\Api\Auth\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Finbricks\Api\Auth\Model\AuthenticateResponse|\Finbricks\Api\Auth\Model\Error
     */
    public function authAuthenticatePost($signature, $authenticateRequest)
    {
        list($response) = $this->authAuthenticatePostWithHttpInfo($signature, $authenticateRequest);
        return $response;
    }

    /**
     * Operation authAuthenticatePostWithHttpInfo
     *
     * Authenticate user
     *
     * @param  string $signature Signature of the request. For more information, see chapter [Signing the request](#section/Security/Signing-the-request). (required)
     * @param  \Finbricks\Api\Auth\Model\AuthenticateRequest $authenticateRequest (required)
     *
     * @throws \Finbricks\Api\Auth\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Finbricks\Api\Auth\Model\AuthenticateResponse|\Finbricks\Api\Auth\Model\Error, HTTP status code, HTTP response headers (array of strings)
     */
    public function authAuthenticatePostWithHttpInfo($signature, $authenticateRequest)
    {
        $request = $this->authAuthenticatePostRequest($signature, $authenticateRequest);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\Finbricks\Api\Auth\Model\AuthenticateResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Finbricks\Api\Auth\Model\AuthenticateResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                default:
                    if ('\Finbricks\Api\Auth\Model\Error' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Finbricks\Api\Auth\Model\Error', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\Finbricks\Api\Auth\Model\AuthenticateResponse';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Finbricks\Api\Auth\Model\AuthenticateResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                default:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Finbricks\Api\Auth\Model\Error',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation authAuthenticatePostAsync
     *
     * Authenticate user
     *
     * @param  string $signature Signature of the request. For more information, see chapter [Signing the request](#section/Security/Signing-the-request). (required)
     * @param  \Finbricks\Api\Auth\Model\AuthenticateRequest $authenticateRequest (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function authAuthenticatePostAsync($signature, $authenticateRequest)
    {
        return $this->authAuthenticatePostAsyncWithHttpInfo($signature, $authenticateRequest)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation authAuthenticatePostAsyncWithHttpInfo
     *
     * Authenticate user
     *
     * @param  string $signature Signature of the request. For more information, see chapter [Signing the request](#section/Security/Signing-the-request). (required)
     * @param  \Finbricks\Api\Auth\Model\AuthenticateRequest $authenticateRequest (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function authAuthenticatePostAsyncWithHttpInfo($signature, $authenticateRequest)
    {
        $returnType = '\Finbricks\Api\Auth\Model\AuthenticateResponse';
        $request = $this->authAuthenticatePostRequest($signature, $authenticateRequest);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'authAuthenticatePost'
     *
     * @param  string $signature Signature of the request. For more information, see chapter [Signing the request](#section/Security/Signing-the-request). (required)
     * @param  \Finbricks\Api\Auth\Model\AuthenticateRequest $authenticateRequest (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function authAuthenticatePostRequest($signature, $authenticateRequest)
    {
        // verify the required parameter 'signature' is set
        if ($signature === null || (is_array($signature) && count($signature) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $signature when calling authAuthenticatePost'
            );
        }
        // verify the required parameter 'authenticateRequest' is set
        if ($authenticateRequest === null || (is_array($authenticateRequest) && count($authenticateRequest) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $authenticateRequest when calling authAuthenticatePost'
            );
        }

        $resourcePath = '/auth/authenticate';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // header params
        if ($signature !== null) {
            $headerParams['signature'] = ObjectSerializer::toHeaderValue($signature);
        }



        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($authenticateRequest)) {
            if ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($authenticateRequest));
            } else {
                $httpBody = $authenticateRequest;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation deleteAllRefreshTokens
     *
     * Delete all users&#39; authentications within merchant
     *
     * @param  string $merchantId Unique merchant identifier assigned by the payment gateway (required)
     * @param  string $signature Signature of the request. For more information, see chapter [Signing the request](#section/Security/Signing-the-request). (required)
     *
     * @throws \Finbricks\Api\Auth\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return void
     */
    public function deleteAllRefreshTokens($merchantId, $signature)
    {
        $this->deleteAllRefreshTokensWithHttpInfo($merchantId, $signature);
    }

    /**
     * Operation deleteAllRefreshTokensWithHttpInfo
     *
     * Delete all users&#39; authentications within merchant
     *
     * @param  string $merchantId Unique merchant identifier assigned by the payment gateway (required)
     * @param  string $signature Signature of the request. For more information, see chapter [Signing the request](#section/Security/Signing-the-request). (required)
     *
     * @throws \Finbricks\Api\Auth\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function deleteAllRefreshTokensWithHttpInfo($merchantId, $signature)
    {
        $request = $this->deleteAllRefreshTokensRequest($merchantId, $signature);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                default:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Finbricks\Api\Auth\Model\Error',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation deleteAllRefreshTokensAsync
     *
     * Delete all users&#39; authentications within merchant
     *
     * @param  string $merchantId Unique merchant identifier assigned by the payment gateway (required)
     * @param  string $signature Signature of the request. For more information, see chapter [Signing the request](#section/Security/Signing-the-request). (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function deleteAllRefreshTokensAsync($merchantId, $signature)
    {
        return $this->deleteAllRefreshTokensAsyncWithHttpInfo($merchantId, $signature)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation deleteAllRefreshTokensAsyncWithHttpInfo
     *
     * Delete all users&#39; authentications within merchant
     *
     * @param  string $merchantId Unique merchant identifier assigned by the payment gateway (required)
     * @param  string $signature Signature of the request. For more information, see chapter [Signing the request](#section/Security/Signing-the-request). (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function deleteAllRefreshTokensAsyncWithHttpInfo($merchantId, $signature)
    {
        $returnType = '';
        $request = $this->deleteAllRefreshTokensRequest($merchantId, $signature);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'deleteAllRefreshTokens'
     *
     * @param  string $merchantId Unique merchant identifier assigned by the payment gateway (required)
     * @param  string $signature Signature of the request. For more information, see chapter [Signing the request](#section/Security/Signing-the-request). (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function deleteAllRefreshTokensRequest($merchantId, $signature)
    {
        // verify the required parameter 'merchantId' is set
        if ($merchantId === null || (is_array($merchantId) && count($merchantId) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $merchantId when calling deleteAllRefreshTokens'
            );
        }
        // verify the required parameter 'signature' is set
        if ($signature === null || (is_array($signature) && count($signature) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $signature when calling deleteAllRefreshTokens'
            );
        }

        $resourcePath = '/auth/revoke/all';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($merchantId !== null) {
            if('form' === 'form' && is_array($merchantId)) {
                foreach($merchantId as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['merchantId'] = $merchantId;
            }
        }

        // header params
        if ($signature !== null) {
            $headerParams['signature'] = ObjectSerializer::toHeaderValue($signature);
        }



        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'DELETE',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation deleteRefreshToken
     *
     * Delete all existing user authentications
     *
     * @param  string $merchantId Unique merchant identifier assigned by the payment gateway (required)
     * @param  string $signature Signature of the request. For more information, see chapter [Signing the request](#section/Security/Signing-the-request). (required)
     * @param  string $clientId Id identifying the end user at the merchant. (required)
     * @param  string $provider Provider code. Example values KB, AIRBANK, MONETA, CSAS, CSOB, RAIFFEISEN, EQUA, FIO. (optional)
     *
     * @throws \Finbricks\Api\Auth\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return void
     */
    public function deleteRefreshToken($merchantId, $signature, $clientId, $provider = null)
    {
        $this->deleteRefreshTokenWithHttpInfo($merchantId, $signature, $clientId, $provider);
    }

    /**
     * Operation deleteRefreshTokenWithHttpInfo
     *
     * Delete all existing user authentications
     *
     * @param  string $merchantId Unique merchant identifier assigned by the payment gateway (required)
     * @param  string $signature Signature of the request. For more information, see chapter [Signing the request](#section/Security/Signing-the-request). (required)
     * @param  string $clientId Id identifying the end user at the merchant. (required)
     * @param  string $provider Provider code. Example values KB, AIRBANK, MONETA, CSAS, CSOB, RAIFFEISEN, EQUA, FIO. (optional)
     *
     * @throws \Finbricks\Api\Auth\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function deleteRefreshTokenWithHttpInfo($merchantId, $signature, $clientId, $provider = null)
    {
        $request = $this->deleteRefreshTokenRequest($merchantId, $signature, $clientId, $provider);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                default:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Finbricks\Api\Auth\Model\Error',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation deleteRefreshTokenAsync
     *
     * Delete all existing user authentications
     *
     * @param  string $merchantId Unique merchant identifier assigned by the payment gateway (required)
     * @param  string $signature Signature of the request. For more information, see chapter [Signing the request](#section/Security/Signing-the-request). (required)
     * @param  string $clientId Id identifying the end user at the merchant. (required)
     * @param  string $provider Provider code. Example values KB, AIRBANK, MONETA, CSAS, CSOB, RAIFFEISEN, EQUA, FIO. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function deleteRefreshTokenAsync($merchantId, $signature, $clientId, $provider = null)
    {
        return $this->deleteRefreshTokenAsyncWithHttpInfo($merchantId, $signature, $clientId, $provider)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation deleteRefreshTokenAsyncWithHttpInfo
     *
     * Delete all existing user authentications
     *
     * @param  string $merchantId Unique merchant identifier assigned by the payment gateway (required)
     * @param  string $signature Signature of the request. For more information, see chapter [Signing the request](#section/Security/Signing-the-request). (required)
     * @param  string $clientId Id identifying the end user at the merchant. (required)
     * @param  string $provider Provider code. Example values KB, AIRBANK, MONETA, CSAS, CSOB, RAIFFEISEN, EQUA, FIO. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function deleteRefreshTokenAsyncWithHttpInfo($merchantId, $signature, $clientId, $provider = null)
    {
        $returnType = '';
        $request = $this->deleteRefreshTokenRequest($merchantId, $signature, $clientId, $provider);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'deleteRefreshToken'
     *
     * @param  string $merchantId Unique merchant identifier assigned by the payment gateway (required)
     * @param  string $signature Signature of the request. For more information, see chapter [Signing the request](#section/Security/Signing-the-request). (required)
     * @param  string $clientId Id identifying the end user at the merchant. (required)
     * @param  string $provider Provider code. Example values KB, AIRBANK, MONETA, CSAS, CSOB, RAIFFEISEN, EQUA, FIO. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function deleteRefreshTokenRequest($merchantId, $signature, $clientId, $provider = null)
    {
        // verify the required parameter 'merchantId' is set
        if ($merchantId === null || (is_array($merchantId) && count($merchantId) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $merchantId when calling deleteRefreshToken'
            );
        }
        // verify the required parameter 'signature' is set
        if ($signature === null || (is_array($signature) && count($signature) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $signature when calling deleteRefreshToken'
            );
        }
        // verify the required parameter 'clientId' is set
        if ($clientId === null || (is_array($clientId) && count($clientId) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $clientId when calling deleteRefreshToken'
            );
        }
        if (strlen($clientId) > 100) {
            throw new \InvalidArgumentException('invalid length for "$clientId" when calling AuthApi.deleteRefreshToken, must be smaller than or equal to 100.');
        }

        if ($provider !== null && strlen($provider) > 50) {
            throw new \InvalidArgumentException('invalid length for "$provider" when calling AuthApi.deleteRefreshToken, must be smaller than or equal to 50.');
        }


        $resourcePath = '/auth/revoke';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($merchantId !== null) {
            if('form' === 'form' && is_array($merchantId)) {
                foreach($merchantId as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['merchantId'] = $merchantId;
            }
        }
        // query params
        if ($clientId !== null) {
            if('form' === 'form' && is_array($clientId)) {
                foreach($clientId as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['clientId'] = $clientId;
            }
        }
        // query params
        if ($provider !== null) {
            if('form' === 'form' && is_array($provider)) {
                foreach($provider as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['provider'] = $provider;
            }
        }

        // header params
        if ($signature !== null) {
            $headerParams['signature'] = ObjectSerializer::toHeaderValue($signature);
        }



        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'DELETE',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getRefreshTokens
     *
     * Get expiration details of user&#39;s authentication
     *
     * @param  string $merchantId Unique merchant identifier assigned by the payment gateway (required)
     * @param  string $signature Signature of the request. For more information, see chapter [Signing the request](#section/Security/Signing-the-request). (required)
     * @param  string $clientId Id identifying the end user at the merchant. (required)
     * @param  string $provider Provider code. Example values KB, AIRBANK, MONETA, CSAS, CSOB, RAIFFEISEN, EQUA, FIO. (optional)
     *
     * @throws \Finbricks\Api\Auth\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Finbricks\Api\Auth\Model\RefreshTokenDto[]|\Finbricks\Api\Auth\Model\Error
     */
    public function getRefreshTokens($merchantId, $signature, $clientId, $provider = null)
    {
        list($response) = $this->getRefreshTokensWithHttpInfo($merchantId, $signature, $clientId, $provider);
        return $response;
    }

    /**
     * Operation getRefreshTokensWithHttpInfo
     *
     * Get expiration details of user&#39;s authentication
     *
     * @param  string $merchantId Unique merchant identifier assigned by the payment gateway (required)
     * @param  string $signature Signature of the request. For more information, see chapter [Signing the request](#section/Security/Signing-the-request). (required)
     * @param  string $clientId Id identifying the end user at the merchant. (required)
     * @param  string $provider Provider code. Example values KB, AIRBANK, MONETA, CSAS, CSOB, RAIFFEISEN, EQUA, FIO. (optional)
     *
     * @throws \Finbricks\Api\Auth\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Finbricks\Api\Auth\Model\RefreshTokenDto[]|\Finbricks\Api\Auth\Model\Error, HTTP status code, HTTP response headers (array of strings)
     */
    public function getRefreshTokensWithHttpInfo($merchantId, $signature, $clientId, $provider = null)
    {
        $request = $this->getRefreshTokensRequest($merchantId, $signature, $clientId, $provider);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\Finbricks\Api\Auth\Model\RefreshTokenDto[]' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Finbricks\Api\Auth\Model\RefreshTokenDto[]', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                default:
                    if ('\Finbricks\Api\Auth\Model\Error' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Finbricks\Api\Auth\Model\Error', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\Finbricks\Api\Auth\Model\RefreshTokenDto[]';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Finbricks\Api\Auth\Model\RefreshTokenDto[]',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                default:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Finbricks\Api\Auth\Model\Error',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getRefreshTokensAsync
     *
     * Get expiration details of user&#39;s authentication
     *
     * @param  string $merchantId Unique merchant identifier assigned by the payment gateway (required)
     * @param  string $signature Signature of the request. For more information, see chapter [Signing the request](#section/Security/Signing-the-request). (required)
     * @param  string $clientId Id identifying the end user at the merchant. (required)
     * @param  string $provider Provider code. Example values KB, AIRBANK, MONETA, CSAS, CSOB, RAIFFEISEN, EQUA, FIO. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getRefreshTokensAsync($merchantId, $signature, $clientId, $provider = null)
    {
        return $this->getRefreshTokensAsyncWithHttpInfo($merchantId, $signature, $clientId, $provider)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getRefreshTokensAsyncWithHttpInfo
     *
     * Get expiration details of user&#39;s authentication
     *
     * @param  string $merchantId Unique merchant identifier assigned by the payment gateway (required)
     * @param  string $signature Signature of the request. For more information, see chapter [Signing the request](#section/Security/Signing-the-request). (required)
     * @param  string $clientId Id identifying the end user at the merchant. (required)
     * @param  string $provider Provider code. Example values KB, AIRBANK, MONETA, CSAS, CSOB, RAIFFEISEN, EQUA, FIO. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getRefreshTokensAsyncWithHttpInfo($merchantId, $signature, $clientId, $provider = null)
    {
        $returnType = '\Finbricks\Api\Auth\Model\RefreshTokenDto[]';
        $request = $this->getRefreshTokensRequest($merchantId, $signature, $clientId, $provider);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getRefreshTokens'
     *
     * @param  string $merchantId Unique merchant identifier assigned by the payment gateway (required)
     * @param  string $signature Signature of the request. For more information, see chapter [Signing the request](#section/Security/Signing-the-request). (required)
     * @param  string $clientId Id identifying the end user at the merchant. (required)
     * @param  string $provider Provider code. Example values KB, AIRBANK, MONETA, CSAS, CSOB, RAIFFEISEN, EQUA, FIO. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function getRefreshTokensRequest($merchantId, $signature, $clientId, $provider = null)
    {
        // verify the required parameter 'merchantId' is set
        if ($merchantId === null || (is_array($merchantId) && count($merchantId) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $merchantId when calling getRefreshTokens'
            );
        }
        // verify the required parameter 'signature' is set
        if ($signature === null || (is_array($signature) && count($signature) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $signature when calling getRefreshTokens'
            );
        }
        // verify the required parameter 'clientId' is set
        if ($clientId === null || (is_array($clientId) && count($clientId) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $clientId when calling getRefreshTokens'
            );
        }
        if (strlen($clientId) > 100) {
            throw new \InvalidArgumentException('invalid length for "$clientId" when calling AuthApi.getRefreshTokens, must be smaller than or equal to 100.');
        }

        if ($provider !== null && strlen($provider) > 50) {
            throw new \InvalidArgumentException('invalid length for "$provider" when calling AuthApi.getRefreshTokens, must be smaller than or equal to 50.');
        }


        $resourcePath = '/auth/token';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($merchantId !== null) {
            if('form' === 'form' && is_array($merchantId)) {
                foreach($merchantId as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['merchantId'] = $merchantId;
            }
        }
        // query params
        if ($clientId !== null) {
            if('form' === 'form' && is_array($clientId)) {
                foreach($clientId as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['clientId'] = $clientId;
            }
        }
        // query params
        if ($provider !== null) {
            if('form' === 'form' && is_array($provider)) {
                foreach($provider as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['provider'] = $provider;
            }
        }

        // header params
        if ($signature !== null) {
            $headerParams['signature'] = ObjectSerializer::toHeaderValue($signature);
        }



        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Create http client option
     *
     * @throws \RuntimeException on file opening failure
     * @return array of http client options
     */
    protected function createHttpClientOption()
    {
        $options = [];
        if ($this->config->getDebug()) {
            $options[RequestOptions::DEBUG] = fopen($this->config->getDebugFile(), 'a');
            if (!$options[RequestOptions::DEBUG]) {
                throw new \RuntimeException('Failed to open the debug file: ' . $this->config->getDebugFile());
            }
        }

        return $options;
    }
}
