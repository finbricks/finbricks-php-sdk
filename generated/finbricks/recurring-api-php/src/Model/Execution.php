<?php
/**
 * Execution
 *
 * PHP version 7.2
 *
 * @category Class
 * @package  Finbricks\Api\Recurring
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Finbricks.com API - Rcurring payments
 *
 * Finbricks.com API - Recurring payments
 *
 * The version of the OpenAPI document: 1.4.1
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 5.1.1
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace Finbricks\Api\Recurring\Model;

use \ArrayAccess;
use \Finbricks\Api\Recurring\ObjectSerializer;

/**
 * Execution Class Doc Comment
 *
 * @category Class
 * @description Payment amount and the currency.
 * @package  Finbricks\Api\Recurring
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<TKey, TValue>
 * @template TKey int|null
 * @template TValue mixed|null
 */
class Execution implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'Execution';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'interval' => 'string',
        'intervalDue' => 'int',
        'mode' => 'string',
        'modeDue' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'interval' => null,
        'intervalDue' => null,
        'mode' => null,
        'modeDue' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'interval' => 'interval',
        'intervalDue' => 'intervalDue',
        'mode' => 'mode',
        'modeDue' => 'modeDue'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'interval' => 'setInterval',
        'intervalDue' => 'setIntervalDue',
        'mode' => 'setMode',
        'modeDue' => 'setModeDue'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'interval' => 'getInterval',
        'intervalDue' => 'getIntervalDue',
        'mode' => 'getMode',
        'modeDue' => 'getModeDue'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['interval'] = $data['interval'] ?? null;
        $this->container['intervalDue'] = $data['intervalDue'] ?? null;
        $this->container['mode'] = $data['mode'] ?? null;
        $this->container['modeDue'] = $data['modeDue'] ?? null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets interval
     *
     * @return string|null
     */
    public function getInterval()
    {
        return $this->container['interval'];
    }

    /**
     * Sets interval
     *
     * @param string|null $interval Execution interval defines how often order is executed.  Possible values: * __DAILY__ Once per day * __WEEKLY__ Once a week * __MONTHLY__ Once a month * __BI_MONTHLY__ Once every two months * __QUARTERLY__ Is done once every quarter of a year * __HALFYEARLY__ Will be done once every six months * __YEARLY__ Is done once a year * __IRREGULAR__ It is performed irregularly
     *
     * @return self
     */
    public function setInterval($interval)
    {
        $this->container['interval'] = $interval;

        return $this;
    }

    /**
     * Gets intervalDue
     *
     * @return int|null
     */
    public function getIntervalDue()
    {
        return $this->container['intervalDue'];
    }

    /**
     * Sets intervalDue
     *
     * @param int|null $intervalDue Value represents order number of the day within particular period when the standing order will be reqularly executed.  Possible values: 1-7 (for WEEKLY interval), 1-28 for MONTHLY, 1-2 for BI_MONTHLY, 1-3 for QUARTERLY, 1-6 for HALFYEARLY, 1-12 for YEARLY.  Possible values: * __1-7__ for WEEKLY interval * __1-28__ for MONTHLY * __1-2__ for BI_MONTHLY * __1-3__ for QUARTERLY * __1-6__ for HALFYEARLY * __1-12__ for YEARLY
     *
     * @return self
     */
    public function setIntervalDue($intervalDue)
    {
        $this->container['intervalDue'] = $intervalDue;

        return $this;
    }

    /**
     * Gets mode
     *
     * @return string|null
     */
    public function getMode()
    {
        return $this->container['mode'];
    }

    /**
     * Sets mode
     *
     * @param string|null $mode The execution mode defines when or how recurring payment will be cancelled, processed the last time.  Possible values: * __UNTIL_DATE__ recurring payment is valid until specific date * __UNTIL_CANCELLATION__ recurring payment is valid forever and must be cancelled by client * __AFTER_MAX_ITERATION_EXCEEDED__ certain count of executions is specified * __MAX_AMOUNT_EXCEEDED__ maximum amount which can be transferred for this order is specified, if next iteration would exceed this amount it is not executed
     *
     * @return self
     */
    public function setMode($mode)
    {
        $this->container['mode'] = $mode;

        return $this;
    }

    /**
     * Gets modeDue
     *
     * @return string|null
     */
    public function getModeDue()
    {
        return $this->container['modeDue'];
    }

    /**
     * Sets modeDue
     *
     * @param string|null $modeDue The execution due mode defines how the date when order should be executed is specified.  Possible values: * __DUE_DAY_OF_MONTH__ specific number of day in the month is defined * __DUE_OR_BEFORE_DAY_OF_MONTH__ is defined as a specific day of the month or the previous day if the day falls on a non-banking day * __DUE_OR_NEXT_DAY_OF_MONTH__ is defined as a specific day of the month or the next day if the day falls on a non-banking day * __DUE_LAST_DAY_OF_MONTH__ order is executed on last day of particular month
     *
     * @return self
     */
    public function setModeDue($modeDue)
    {
        $this->container['modeDue'] = $modeDue;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


