<?php
/**
 * RecurringPaymentDetail
 *
 * PHP version 7.2
 *
 * @category Class
 * @package  Finbricks\Api\Recurring
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Finbricks.com API - Rcurring payments
 *
 * Finbricks.com API - Recurring payments
 *
 * The version of the OpenAPI document: 1.4.1
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 5.1.1
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace Finbricks\Api\Recurring\Model;

use \ArrayAccess;
use \Finbricks\Api\Recurring\ObjectSerializer;

/**
 * RecurringPaymentDetail Class Doc Comment
 *
 * @category Class
 * @package  Finbricks\Api\Recurring
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<TKey, TValue>
 * @template TKey int|null
 * @template TValue mixed|null
 */
class RecurringPaymentDetail implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'RecurringPaymentDetail';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'transactionIdentification' => 'string',
        'paymentType' => 'string',
        'amount' => '\Finbricks\Api\Recurring\Model\Amount',
        'parties' => '\Finbricks\Api\Recurring\Model\RecurringPaymentDetailParties',
        'execution' => '\Finbricks\Api\Recurring\Model\Execution',
        'validity' => '\Finbricks\Api\Recurring\Model\Validity',
        'description' => 'string',
        'symbols' => '\Finbricks\Api\Recurring\Model\Symbols'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'transactionIdentification' => null,
        'paymentType' => null,
        'amount' => null,
        'parties' => null,
        'execution' => null,
        'validity' => null,
        'description' => null,
        'symbols' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'transactionIdentification' => 'transactionIdentification',
        'paymentType' => 'paymentType',
        'amount' => 'amount',
        'parties' => 'parties',
        'execution' => 'execution',
        'validity' => 'validity',
        'description' => 'description',
        'symbols' => 'symbols'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'transactionIdentification' => 'setTransactionIdentification',
        'paymentType' => 'setPaymentType',
        'amount' => 'setAmount',
        'parties' => 'setParties',
        'execution' => 'setExecution',
        'validity' => 'setValidity',
        'description' => 'setDescription',
        'symbols' => 'setSymbols'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'transactionIdentification' => 'getTransactionIdentification',
        'paymentType' => 'getPaymentType',
        'amount' => 'getAmount',
        'parties' => 'getParties',
        'execution' => 'getExecution',
        'validity' => 'getValidity',
        'description' => 'getDescription',
        'symbols' => 'getSymbols'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['transactionIdentification'] = $data['transactionIdentification'] ?? null;
        $this->container['paymentType'] = $data['paymentType'] ?? null;
        $this->container['amount'] = $data['amount'] ?? null;
        $this->container['parties'] = $data['parties'] ?? null;
        $this->container['execution'] = $data['execution'] ?? null;
        $this->container['validity'] = $data['validity'] ?? null;
        $this->container['description'] = $data['description'] ?? null;
        $this->container['symbols'] = $data['symbols'] ?? null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if (!is_null($this->container['description']) && (mb_strlen($this->container['description']) > 140)) {
            $invalidProperties[] = "invalid value for 'description', the character length must be smaller than or equal to 140.";
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets transactionIdentification
     *
     * @return string|null
     */
    public function getTransactionIdentification()
    {
        return $this->container['transactionIdentification'];
    }

    /**
     * Sets transactionIdentification
     *
     * @param string|null $transactionIdentification Identifier of recurring payment order.
     *
     * @return self
     */
    public function setTransactionIdentification($transactionIdentification)
    {
        $this->container['transactionIdentification'] = $transactionIdentification;

        return $this;
    }

    /**
     * Gets paymentType
     *
     * @return string|null
     */
    public function getPaymentType()
    {
        return $this->container['paymentType'];
    }

    /**
     * Sets paymentType
     *
     * @param string|null $paymentType Type of entered payment.
     *
     * @return self
     */
    public function setPaymentType($paymentType)
    {
        $this->container['paymentType'] = $paymentType;

        return $this;
    }

    /**
     * Gets amount
     *
     * @return \Finbricks\Api\Recurring\Model\Amount|null
     */
    public function getAmount()
    {
        return $this->container['amount'];
    }

    /**
     * Sets amount
     *
     * @param \Finbricks\Api\Recurring\Model\Amount|null $amount amount
     *
     * @return self
     */
    public function setAmount($amount)
    {
        $this->container['amount'] = $amount;

        return $this;
    }

    /**
     * Gets parties
     *
     * @return \Finbricks\Api\Recurring\Model\RecurringPaymentDetailParties|null
     */
    public function getParties()
    {
        return $this->container['parties'];
    }

    /**
     * Sets parties
     *
     * @param \Finbricks\Api\Recurring\Model\RecurringPaymentDetailParties|null $parties parties
     *
     * @return self
     */
    public function setParties($parties)
    {
        $this->container['parties'] = $parties;

        return $this;
    }

    /**
     * Gets execution
     *
     * @return \Finbricks\Api\Recurring\Model\Execution|null
     */
    public function getExecution()
    {
        return $this->container['execution'];
    }

    /**
     * Sets execution
     *
     * @param \Finbricks\Api\Recurring\Model\Execution|null $execution execution
     *
     * @return self
     */
    public function setExecution($execution)
    {
        $this->container['execution'] = $execution;

        return $this;
    }

    /**
     * Gets validity
     *
     * @return \Finbricks\Api\Recurring\Model\Validity|null
     */
    public function getValidity()
    {
        return $this->container['validity'];
    }

    /**
     * Sets validity
     *
     * @param \Finbricks\Api\Recurring\Model\Validity|null $validity validity
     *
     * @return self
     */
    public function setValidity($validity)
    {
        $this->container['validity'] = $validity;

        return $this;
    }

    /**
     * Gets description
     *
     * @return string|null
     */
    public function getDescription()
    {
        return $this->container['description'];
    }

    /**
     * Sets description
     *
     * @param string|null $description Recurring payment description - message for the payee
     *
     * @return self
     */
    public function setDescription($description)
    {
        if (!is_null($description) && (mb_strlen($description) > 140)) {
            throw new \InvalidArgumentException('invalid length for $description when calling RecurringPaymentDetail., must be smaller than or equal to 140.');
        }

        $this->container['description'] = $description;

        return $this;
    }

    /**
     * Gets symbols
     *
     * @return \Finbricks\Api\Recurring\Model\Symbols|null
     */
    public function getSymbols()
    {
        return $this->container['symbols'];
    }

    /**
     * Sets symbols
     *
     * @param \Finbricks\Api\Recurring\Model\Symbols|null $symbols symbols
     *
     * @return self
     */
    public function setSymbols($symbols)
    {
        $this->container['symbols'] = $symbols;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


