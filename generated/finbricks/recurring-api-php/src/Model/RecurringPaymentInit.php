<?php
/**
 * RecurringPaymentInit
 *
 * PHP version 7.2
 *
 * @category Class
 * @package  Finbricks\Api\Recurring
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Finbricks.com API - Rcurring payments
 *
 * Finbricks.com API - Recurring payments
 *
 * The version of the OpenAPI document: 1.4.1
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 5.1.1
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace Finbricks\Api\Recurring\Model;

use \ArrayAccess;
use \Finbricks\Api\Recurring\ObjectSerializer;

/**
 * RecurringPaymentInit Class Doc Comment
 *
 * @category Class
 * @description Recurring payment init
 * @package  Finbricks\Api\Recurring
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<TKey, TValue>
 * @template TKey int|null
 * @template TValue mixed|null
 */
class RecurringPaymentInit implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'RecurringPaymentInit';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'merchantId' => 'string',
        'merchantTransactionId' => 'string',
        'amount' => 'float',
        'debtorAccountIban' => 'string',
        'creditorAccountIban' => 'string',
        'description' => 'string',
        'variableSymbol' => 'string',
        'specificSymbol' => 'string',
        'constantSymbol' => 'string',
        'callbackUrl' => 'string',
        'clientId' => 'string',
        'operationId' => 'string',
        'requestedExecutionDate' => '\DateTime',
        'interval' => 'string',
        'intervalDue' => 'int',
        'mode' => 'string',
        'modeDue' => 'string',
        'lastExecutionDate' => '\DateTime',
        'maxIterations' => 'int',
        'initiatorName' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'merchantId' => 'uuid',
        'merchantTransactionId' => 'uuid',
        'amount' => null,
        'debtorAccountIban' => null,
        'creditorAccountIban' => null,
        'description' => null,
        'variableSymbol' => null,
        'specificSymbol' => null,
        'constantSymbol' => null,
        'callbackUrl' => null,
        'clientId' => null,
        'operationId' => 'uuid',
        'requestedExecutionDate' => 'date',
        'interval' => null,
        'intervalDue' => null,
        'mode' => null,
        'modeDue' => null,
        'lastExecutionDate' => 'date',
        'maxIterations' => null,
        'initiatorName' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'merchantId' => 'merchantId',
        'merchantTransactionId' => 'merchantTransactionId',
        'amount' => 'amount',
        'debtorAccountIban' => 'debtorAccountIban',
        'creditorAccountIban' => 'creditorAccountIban',
        'description' => 'description',
        'variableSymbol' => 'variableSymbol',
        'specificSymbol' => 'specificSymbol',
        'constantSymbol' => 'constantSymbol',
        'callbackUrl' => 'callbackUrl',
        'clientId' => 'clientId',
        'operationId' => 'operationId',
        'requestedExecutionDate' => 'requestedExecutionDate',
        'interval' => 'interval',
        'intervalDue' => 'intervalDue',
        'mode' => 'mode',
        'modeDue' => 'modeDue',
        'lastExecutionDate' => 'lastExecutionDate',
        'maxIterations' => 'maxIterations',
        'initiatorName' => 'initiatorName'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'merchantId' => 'setMerchantId',
        'merchantTransactionId' => 'setMerchantTransactionId',
        'amount' => 'setAmount',
        'debtorAccountIban' => 'setDebtorAccountIban',
        'creditorAccountIban' => 'setCreditorAccountIban',
        'description' => 'setDescription',
        'variableSymbol' => 'setVariableSymbol',
        'specificSymbol' => 'setSpecificSymbol',
        'constantSymbol' => 'setConstantSymbol',
        'callbackUrl' => 'setCallbackUrl',
        'clientId' => 'setClientId',
        'operationId' => 'setOperationId',
        'requestedExecutionDate' => 'setRequestedExecutionDate',
        'interval' => 'setInterval',
        'intervalDue' => 'setIntervalDue',
        'mode' => 'setMode',
        'modeDue' => 'setModeDue',
        'lastExecutionDate' => 'setLastExecutionDate',
        'maxIterations' => 'setMaxIterations',
        'initiatorName' => 'setInitiatorName'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'merchantId' => 'getMerchantId',
        'merchantTransactionId' => 'getMerchantTransactionId',
        'amount' => 'getAmount',
        'debtorAccountIban' => 'getDebtorAccountIban',
        'creditorAccountIban' => 'getCreditorAccountIban',
        'description' => 'getDescription',
        'variableSymbol' => 'getVariableSymbol',
        'specificSymbol' => 'getSpecificSymbol',
        'constantSymbol' => 'getConstantSymbol',
        'callbackUrl' => 'getCallbackUrl',
        'clientId' => 'getClientId',
        'operationId' => 'getOperationId',
        'requestedExecutionDate' => 'getRequestedExecutionDate',
        'interval' => 'getInterval',
        'intervalDue' => 'getIntervalDue',
        'mode' => 'getMode',
        'modeDue' => 'getModeDue',
        'lastExecutionDate' => 'getLastExecutionDate',
        'maxIterations' => 'getMaxIterations',
        'initiatorName' => 'getInitiatorName'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['merchantId'] = $data['merchantId'] ?? null;
        $this->container['merchantTransactionId'] = $data['merchantTransactionId'] ?? null;
        $this->container['amount'] = $data['amount'] ?? null;
        $this->container['debtorAccountIban'] = $data['debtorAccountIban'] ?? null;
        $this->container['creditorAccountIban'] = $data['creditorAccountIban'] ?? null;
        $this->container['description'] = $data['description'] ?? null;
        $this->container['variableSymbol'] = $data['variableSymbol'] ?? null;
        $this->container['specificSymbol'] = $data['specificSymbol'] ?? null;
        $this->container['constantSymbol'] = $data['constantSymbol'] ?? null;
        $this->container['callbackUrl'] = $data['callbackUrl'] ?? null;
        $this->container['clientId'] = $data['clientId'] ?? null;
        $this->container['operationId'] = $data['operationId'] ?? null;
        $this->container['requestedExecutionDate'] = $data['requestedExecutionDate'] ?? null;
        $this->container['interval'] = $data['interval'] ?? null;
        $this->container['intervalDue'] = $data['intervalDue'] ?? null;
        $this->container['mode'] = $data['mode'] ?? null;
        $this->container['modeDue'] = $data['modeDue'] ?? null;
        $this->container['lastExecutionDate'] = $data['lastExecutionDate'] ?? null;
        $this->container['maxIterations'] = $data['maxIterations'] ?? null;
        $this->container['initiatorName'] = $data['initiatorName'] ?? null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['merchantId'] === null) {
            $invalidProperties[] = "'merchantId' can't be null";
        }
        if ($this->container['merchantTransactionId'] === null) {
            $invalidProperties[] = "'merchantTransactionId' can't be null";
        }
        if ($this->container['amount'] === null) {
            $invalidProperties[] = "'amount' can't be null";
        }
        if ($this->container['debtorAccountIban'] === null) {
            $invalidProperties[] = "'debtorAccountIban' can't be null";
        }
        if ($this->container['creditorAccountIban'] === null) {
            $invalidProperties[] = "'creditorAccountIban' can't be null";
        }
        if (!is_null($this->container['description']) && (mb_strlen($this->container['description']) > 140)) {
            $invalidProperties[] = "invalid value for 'description', the character length must be smaller than or equal to 140.";
        }

        if (!is_null($this->container['variableSymbol']) && (mb_strlen($this->container['variableSymbol']) > 10)) {
            $invalidProperties[] = "invalid value for 'variableSymbol', the character length must be smaller than or equal to 10.";
        }

        if (!is_null($this->container['specificSymbol']) && (mb_strlen($this->container['specificSymbol']) > 10)) {
            $invalidProperties[] = "invalid value for 'specificSymbol', the character length must be smaller than or equal to 10.";
        }

        if (!is_null($this->container['constantSymbol']) && (mb_strlen($this->container['constantSymbol']) > 10)) {
            $invalidProperties[] = "invalid value for 'constantSymbol', the character length must be smaller than or equal to 10.";
        }

        if (!is_null($this->container['clientId']) && (mb_strlen($this->container['clientId']) > 100)) {
            $invalidProperties[] = "invalid value for 'clientId', the character length must be smaller than or equal to 100.";
        }

        if ($this->container['requestedExecutionDate'] === null) {
            $invalidProperties[] = "'requestedExecutionDate' can't be null";
        }
        if ($this->container['interval'] === null) {
            $invalidProperties[] = "'interval' can't be null";
        }
        if ($this->container['mode'] === null) {
            $invalidProperties[] = "'mode' can't be null";
        }
        if ($this->container['modeDue'] === null) {
            $invalidProperties[] = "'modeDue' can't be null";
        }
        if (!is_null($this->container['initiatorName']) && (mb_strlen($this->container['initiatorName']) > 50)) {
            $invalidProperties[] = "invalid value for 'initiatorName', the character length must be smaller than or equal to 50.";
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets merchantId
     *
     * @return string
     */
    public function getMerchantId()
    {
        return $this->container['merchantId'];
    }

    /**
     * Sets merchantId
     *
     * @param string $merchantId Unique merchant identifier from merchant registration process
     *
     * @return self
     */
    public function setMerchantId($merchantId)
    {
        $this->container['merchantId'] = $merchantId;

        return $this;
    }

    /**
     * Gets merchantTransactionId
     *
     * @return string
     */
    public function getMerchantTransactionId()
    {
        return $this->container['merchantTransactionId'];
    }

    /**
     * Sets merchantTransactionId
     *
     * @param string $merchantTransactionId Unique transaction identifier generated by merchant
     *
     * @return self
     */
    public function setMerchantTransactionId($merchantTransactionId)
    {
        $this->container['merchantTransactionId'] = $merchantTransactionId;

        return $this;
    }

    /**
     * Gets amount
     *
     * @return float
     */
    public function getAmount()
    {
        return $this->container['amount'];
    }

    /**
     * Sets amount
     *
     * @param float $amount Recurring payment amount
     *
     * @return self
     */
    public function setAmount($amount)
    {
        $this->container['amount'] = $amount;

        return $this;
    }

    /**
     * Gets debtorAccountIban
     *
     * @return string
     */
    public function getDebtorAccountIban()
    {
        return $this->container['debtorAccountIban'];
    }

    /**
     * Sets debtorAccountIban
     *
     * @param string $debtorAccountIban Debtor's account number in IBAN format
     *
     * @return self
     */
    public function setDebtorAccountIban($debtorAccountIban)
    {
        $this->container['debtorAccountIban'] = $debtorAccountIban;

        return $this;
    }

    /**
     * Gets creditorAccountIban
     *
     * @return string
     */
    public function getCreditorAccountIban()
    {
        return $this->container['creditorAccountIban'];
    }

    /**
     * Sets creditorAccountIban
     *
     * @param string $creditorAccountIban Creditor's account number in IBAN format
     *
     * @return self
     */
    public function setCreditorAccountIban($creditorAccountIban)
    {
        $this->container['creditorAccountIban'] = $creditorAccountIban;

        return $this;
    }

    /**
     * Gets description
     *
     * @return string|null
     */
    public function getDescription()
    {
        return $this->container['description'];
    }

    /**
     * Sets description
     *
     * @param string|null $description Payment description - message for the payee
     *
     * @return self
     */
    public function setDescription($description)
    {
        if (!is_null($description) && (mb_strlen($description) > 140)) {
            throw new \InvalidArgumentException('invalid length for $description when calling RecurringPaymentInit., must be smaller than or equal to 140.');
        }

        $this->container['description'] = $description;

        return $this;
    }

    /**
     * Gets variableSymbol
     *
     * @return string|null
     */
    public function getVariableSymbol()
    {
        return $this->container['variableSymbol'];
    }

    /**
     * Sets variableSymbol
     *
     * @param string|null $variableSymbol Variable symbol. Some banks may trim '0's at the beginning.
     *
     * @return self
     */
    public function setVariableSymbol($variableSymbol)
    {
        if (!is_null($variableSymbol) && (mb_strlen($variableSymbol) > 10)) {
            throw new \InvalidArgumentException('invalid length for $variableSymbol when calling RecurringPaymentInit., must be smaller than or equal to 10.');
        }

        $this->container['variableSymbol'] = $variableSymbol;

        return $this;
    }

    /**
     * Gets specificSymbol
     *
     * @return string|null
     */
    public function getSpecificSymbol()
    {
        return $this->container['specificSymbol'];
    }

    /**
     * Sets specificSymbol
     *
     * @param string|null $specificSymbol Specific symbol. Some banks may trim '0's at the beginning.
     *
     * @return self
     */
    public function setSpecificSymbol($specificSymbol)
    {
        if (!is_null($specificSymbol) && (mb_strlen($specificSymbol) > 10)) {
            throw new \InvalidArgumentException('invalid length for $specificSymbol when calling RecurringPaymentInit., must be smaller than or equal to 10.');
        }

        $this->container['specificSymbol'] = $specificSymbol;

        return $this;
    }

    /**
     * Gets constantSymbol
     *
     * @return string|null
     */
    public function getConstantSymbol()
    {
        return $this->container['constantSymbol'];
    }

    /**
     * Sets constantSymbol
     *
     * @param string|null $constantSymbol Constant symbol. Some banks may trim '0's at the beginning.
     *
     * @return self
     */
    public function setConstantSymbol($constantSymbol)
    {
        if (!is_null($constantSymbol) && (mb_strlen($constantSymbol) > 10)) {
            throw new \InvalidArgumentException('invalid length for $constantSymbol when calling RecurringPaymentInit., must be smaller than or equal to 10.');
        }

        $this->container['constantSymbol'] = $constantSymbol;

        return $this;
    }

    /**
     * Gets callbackUrl
     *
     * @return string|null
     */
    public function getCallbackUrl()
    {
        return $this->container['callbackUrl'];
    }

    /**
     * Sets callbackUrl
     *
     * @param string|null $callbackUrl URL that is called after the process of recurring payment is done.
     *
     * @return self
     */
    public function setCallbackUrl($callbackUrl)
    {
        $this->container['callbackUrl'] = $callbackUrl;

        return $this;
    }

    /**
     * Gets clientId
     *
     * @return string|null
     */
    public function getClientId()
    {
        return $this->container['clientId'];
    }

    /**
     * Sets clientId
     *
     * @param string|null $clientId End-user identifier assigned by the customer. Use [/auth/authenticate](#operation/authAuthenticatePost) to let the user authenticate in the bank.  `clientId` or `operationId` is required. For more information, see chapter [Identifiers](#section/Overview/Identifiers).
     *
     * @return self
     */
    public function setClientId($clientId)
    {
        if (!is_null($clientId) && (mb_strlen($clientId) > 100)) {
            throw new \InvalidArgumentException('invalid length for $clientId when calling RecurringPaymentInit., must be smaller than or equal to 100.');
        }

        $this->container['clientId'] = $clientId;

        return $this;
    }

    /**
     * Gets operationId
     *
     * @return string|null
     */
    public function getOperationId()
    {
        return $this->container['operationId'];
    }

    /**
     * Sets operationId
     *
     * @param string|null $operationId End-user identifier assigned by Finbricks.com. Use [/auth/authenticate](#operation/authAuthenticatePost) to let the user authenticate in the bank.  `clientId` or `operationId` is required. For more information, see chapter [Identifiers](#section/Overview/Identifiers).\"
     *
     * @return self
     */
    public function setOperationId($operationId)
    {
        $this->container['operationId'] = $operationId;

        return $this;
    }

    /**
     * Gets requestedExecutionDate
     *
     * @return \DateTime
     */
    public function getRequestedExecutionDate()
    {
        return $this->container['requestedExecutionDate'];
    }

    /**
     * Sets requestedExecutionDate
     *
     * @param \DateTime $requestedExecutionDate Requested date of recurring payment. ISODate i.e. YYYY-MM-DD.  where: YYYY = four-digit year MM = two-digit month (01=January, etc.) DD = two-digit day of month (01 through 31).
     *
     * @return self
     */
    public function setRequestedExecutionDate($requestedExecutionDate)
    {
        $this->container['requestedExecutionDate'] = $requestedExecutionDate;

        return $this;
    }

    /**
     * Gets interval
     *
     * @return string
     */
    public function getInterval()
    {
        return $this->container['interval'];
    }

    /**
     * Sets interval
     *
     * @param string $interval Execution interval defines how often order is executed.  Possible values: * __DAILY__ Once per day * __WEEKLY__ Once a week * __MONTHLY__ Once a month * __BI_MONTHLY__ Once every two months * __QUARTERLY__ Is done once every quarter of a year * __HALFYEARLY__ Will be done once every six months * __YEARLY__ Is done once a year * __IRREGULAR__ It is performed irregularly
     *
     * @return self
     */
    public function setInterval($interval)
    {
        $this->container['interval'] = $interval;

        return $this;
    }

    /**
     * Gets intervalDue
     *
     * @return int|null
     */
    public function getIntervalDue()
    {
        return $this->container['intervalDue'];
    }

    /**
     * Sets intervalDue
     *
     * @param int|null $intervalDue Value represents order number of the day within particular period when the standing order will be reqularly executed.  Possible values: 1-7 (for WEEKLY interval), 1-28 for MONTHLY, 1-2 for BI_MONTHLY, 1-3 for QUARTERLY, 1-6 for HALFYEARLY, 1-12 for YEARLY.  Possible values: * __1-7__ for WEEKLY interval * __1-28__ for MONTHLY * __1-2__ for BI_MONTHLY * __1-3__ for QUARTERLY * __1-6__ for HALFYEARLY * __1-12__ for YEARLY
     *
     * @return self
     */
    public function setIntervalDue($intervalDue)
    {
        $this->container['intervalDue'] = $intervalDue;

        return $this;
    }

    /**
     * Gets mode
     *
     * @return string
     */
    public function getMode()
    {
        return $this->container['mode'];
    }

    /**
     * Sets mode
     *
     * @param string $mode The execution mode defines when or how recurring payment will be cancelled, processed the last time.  Possible values: * __UNTIL_DATE__ recurring payment is valid until specific date * __UNTIL_CANCELLATION__ recurring payment is valid forever and must be cancelled by client * __AFTER_MAX_ITERATION_EXCEEDED__ certain count of executions is specified * __MAX_AMOUNT_EXCEEDED__ maximum amount which can be transferred for this order is specified, if next iteration would exceed this amount it is not executed
     *
     * @return self
     */
    public function setMode($mode)
    {
        $this->container['mode'] = $mode;

        return $this;
    }

    /**
     * Gets modeDue
     *
     * @return string
     */
    public function getModeDue()
    {
        return $this->container['modeDue'];
    }

    /**
     * Sets modeDue
     *
     * @param string $modeDue The execution due mode defines how the date when order should be executed is specified.  Possible values: * __DUE_DAY_OF_MONTH__ specific number of day in the month is defined * __DUE_OR_BEFORE_DAY_OF_MONTH__ is defined as a specific day of the month or the previous day if the day falls on a non-banking day * __DUE_OR_NEXT_DAY_OF_MONTH__ is defined as a specific day of the month or the next day if the day falls on a non-banking day * __DUE_LAST_DAY_OF_MONTH__ order is executed on last day of particular month
     *
     * @return self
     */
    public function setModeDue($modeDue)
    {
        $this->container['modeDue'] = $modeDue;

        return $this;
    }

    /**
     * Gets lastExecutionDate
     *
     * @return \DateTime|null
     */
    public function getLastExecutionDate()
    {
        return $this->container['lastExecutionDate'];
    }

    /**
     * Sets lastExecutionDate
     *
     * @param \DateTime|null $lastExecutionDate Date when the last order will be processed. Only applicable in combination with `mode` `UNTIL_DATE` or `UNTIL_CANCELLATION`.  Null value responds to ending by the user. ISODate i.e. YYYY-MM-DD.  where: YYYY = four-digit year MM = two-digit month (01=January, etc.) DD = two-digit day of month (01 through 31).
     *
     * @return self
     */
    public function setLastExecutionDate($lastExecutionDate)
    {
        $this->container['lastExecutionDate'] = $lastExecutionDate;

        return $this;
    }

    /**
     * Gets maxIterations
     *
     * @return int|null
     */
    public function getMaxIterations()
    {
        return $this->container['maxIterations'];
    }

    /**
     * Sets maxIterations
     *
     * @param int|null $maxIterations Maximum number of iterations - processing of the standing order. Only applicable in combination with `mode` `AFTER_MAX_ITERATION_EXCEEDED`.
     *
     * @return self
     */
    public function setMaxIterations($maxIterations)
    {
        $this->container['maxIterations'] = $maxIterations;

        return $this;
    }

    /**
     * Gets initiatorName
     *
     * @return string|null
     */
    public function getInitiatorName()
    {
        return $this->container['initiatorName'];
    }

    /**
     * Sets initiatorName
     *
     * @param string|null $initiatorName Name of the initiator of the payment. The initiator is a party using your services.
     *
     * @return self
     */
    public function setInitiatorName($initiatorName)
    {
        if (!is_null($initiatorName) && (mb_strlen($initiatorName) > 50)) {
            throw new \InvalidArgumentException('invalid length for $initiatorName when calling RecurringPaymentInit., must be smaller than or equal to 50.');
        }

        $this->container['initiatorName'] = $initiatorName;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


